
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b7c  08004b7c  00005b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000364  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a98e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8e  00000000  00000000  00010a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  000125a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005dd  00000000  00000000  00012d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d341  00000000  00000000  00013335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1c6  00000000  00000000  00030676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adba2  00000000  00000000  0003b83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e93de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000231c  00000000  00000000  000e9424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  000eb740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b64 	.word	0x08004b64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004b64 	.word	0x08004b64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fc59 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f8af 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f975 	bl	800057c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000292:	f000 f907 	bl	80004a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000296:	f000 f93b 	bl	8000510 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	@ 0x64
 800029c:	f000 fcb4 	bl	8000c08 <HAL_Delay>

  // FLUSH DATA FROM USART1 AND USART3
  while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80002a0:	e005      	b.n	80002ae <main+0x2e>
      uint8_t dummy;
      HAL_UART_Receive(&huart1, &dummy, 1, 50);
 80002a2:	1df9      	adds	r1, r7, #7
 80002a4:	2332      	movs	r3, #50	@ 0x32
 80002a6:	2201      	movs	r2, #1
 80002a8:	4842      	ldr	r0, [pc, #264]	@ (80003b4 <main+0x134>)
 80002aa:	f002 fc0d 	bl	8002ac8 <HAL_UART_Receive>
  while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80002ae:	4b41      	ldr	r3, [pc, #260]	@ (80003b4 <main+0x134>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	2b20      	cmp	r3, #32
 80002ba:	d0f2      	beq.n	80002a2 <main+0x22>
  }

  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE)) {
 80002bc:	e005      	b.n	80002ca <main+0x4a>
      uint8_t dummy;
      HAL_UART_Receive(&huart3, &dummy, 1, 50);
 80002be:	1db9      	adds	r1, r7, #6
 80002c0:	2332      	movs	r3, #50	@ 0x32
 80002c2:	2201      	movs	r2, #1
 80002c4:	483c      	ldr	r0, [pc, #240]	@ (80003b8 <main+0x138>)
 80002c6:	f002 fbff 	bl	8002ac8 <HAL_UART_Receive>
  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE)) {
 80002ca:	4b3b      	ldr	r3, [pc, #236]	@ (80003b8 <main+0x138>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	2b20      	cmp	r3, #32
 80002d6:	d0f2      	beq.n	80002be <main+0x3e>
  }

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);					// keep blue led on (FNS)
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002de:	4837      	ldr	r0, [pc, #220]	@ (80003bc <main+0x13c>)
 80002e0:	f000 ffbe 	bl	8001260 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);				// init green led off
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002ea:	4834      	ldr	r0, [pc, #208]	@ (80003bc <main+0x13c>)
 80002ec:	f000 ffb8 	bl	8001260 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);					// init red led off
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002f6:	4831      	ldr	r0, [pc, #196]	@ (80003bc <main+0x13c>)
 80002f8:	f000 ffb2 	bl	8001260 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_on == 1) {
 80002fc:	4b30      	ldr	r3, [pc, #192]	@ (80003c0 <main+0x140>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d105      	bne.n	8000310 <main+0x90>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);					// keep green led on
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030a:	482c      	ldr	r0, [pc, #176]	@ (80003bc <main+0x13c>)
 800030c:	f000 ffa8 	bl	8001260 <HAL_GPIO_WritePin>
	  }
	  if(flag_on == 0) {
 8000310:	4b2b      	ldr	r3, [pc, #172]	@ (80003c0 <main+0x140>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10b      	bne.n	8000330 <main+0xb0>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);				// keep green led off
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800031e:	4827      	ldr	r0, [pc, #156]	@ (80003bc <main+0x13c>)
 8000320:	f000 ff9e 	bl	8001260 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);					// keep red led off
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800032a:	4824      	ldr	r0, [pc, #144]	@ (80003bc <main+0x13c>)
 800032c:	f000 ff98 	bl	8001260 <HAL_GPIO_WritePin>
	  }

	  if(flag_command == 1) {
 8000330:	4b24      	ldr	r3, [pc, #144]	@ (80003c4 <main+0x144>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d111      	bne.n	800035c <main+0xdc>
		  // SEND COMMAND VIA USART 3
		  flag_command = 0;
 8000338:	4b22      	ldr	r3, [pc, #136]	@ (80003c4 <main+0x144>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(10);																		// to stabilize USART
 800033e:	200a      	movs	r0, #10
 8000340:	f000 fc62 	bl	8000c08 <HAL_Delay>
		  memcpy(USART3_TXBuffer, USART1_RXBuffer, USART1_BUFFER_SIZE);							// copy received command in TX buffer
 8000344:	4b20      	ldr	r3, [pc, #128]	@ (80003c8 <main+0x148>)
 8000346:	4a21      	ldr	r2, [pc, #132]	@ (80003cc <main+0x14c>)
 8000348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034c:	6018      	str	r0, [r3, #0]
 800034e:	3304      	adds	r3, #4
 8000350:	8019      	strh	r1, [r3, #0]
		  HAL_UART_Transmit_IT(&huart3, USART3_TXBuffer, USART1_BUFFER_SIZE);					// start transmission on interrupt
 8000352:	2206      	movs	r2, #6
 8000354:	491c      	ldr	r1, [pc, #112]	@ (80003c8 <main+0x148>)
 8000356:	4818      	ldr	r0, [pc, #96]	@ (80003b8 <main+0x138>)
 8000358:	f002 fc6c 	bl	8002c34 <HAL_UART_Transmit_IT>
	  }

	  if(flag_creds == 1) {
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <main+0x150>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d118      	bne.n	8000396 <main+0x116>
			// SEND CREDENTIALS VIA USART 1
			flag_creds = 0;
 8000364:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <main+0x150>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
			USART1_TXidx = strlen((char*)USART3_RXBuffer);
			HAL_Delay(10);																		// to stabilize USART
			memcpy(USART1_TXBuffer, USART3_RXBuffer, USART1_TXidx);								// copy received command in TX buffer
			HAL_UART_Transmit_IT(&huart1, USART1_TXBuffer, USART1_TXidx);						// start transmission on interrupt
			*/
			HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fc4c 	bl	8000c08 <HAL_Delay>
			sprintf((char*)USART1_TXBuffer, "<%s>\n", (char*)USART3_RXBuffer);
 8000370:	4a18      	ldr	r2, [pc, #96]	@ (80003d4 <main+0x154>)
 8000372:	4919      	ldr	r1, [pc, #100]	@ (80003d8 <main+0x158>)
 8000374:	4819      	ldr	r0, [pc, #100]	@ (80003dc <main+0x15c>)
 8000376:	f003 ff43 	bl	8004200 <siprintf>
			USART1_TXidx = strlen((char*)USART1_TXBuffer);
 800037a:	4818      	ldr	r0, [pc, #96]	@ (80003dc <main+0x15c>)
 800037c:	f7ff ff28 	bl	80001d0 <strlen>
 8000380:	4603      	mov	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <main+0x160>)
 8000386:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, USART1_TXBuffer, USART1_TXidx);
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <main+0x160>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	4913      	ldr	r1, [pc, #76]	@ (80003dc <main+0x15c>)
 8000390:	4808      	ldr	r0, [pc, #32]	@ (80003b4 <main+0x134>)
 8000392:	f002 fc4f 	bl	8002c34 <HAL_UART_Transmit_IT>
	  }

	  if(flag_uart1_error == 1 || flag_uart3_error == 1) {
 8000396:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <main+0x164>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d003      	beq.n	80003a6 <main+0x126>
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <main+0x168>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d1aa      	bne.n	80002fc <main+0x7c>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);				// keep red led on
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ac:	4803      	ldr	r0, [pc, #12]	@ (80003bc <main+0x13c>)
 80003ae:	f000 ff57 	bl	8001260 <HAL_GPIO_WritePin>
	  if(flag_on == 1) {
 80003b2:	e7a3      	b.n	80002fc <main+0x7c>
 80003b4:	20000078 	.word	0x20000078
 80003b8:	20000100 	.word	0x20000100
 80003bc:	48001000 	.word	0x48001000
 80003c0:	20000269 	.word	0x20000269
 80003c4:	2000026a 	.word	0x2000026a
 80003c8:	20000260 	.word	0x20000260
 80003cc:	20000188 	.word	0x20000188
 80003d0:	2000026b 	.word	0x2000026b
 80003d4:	200001f8 	.word	0x200001f8
 80003d8:	08004b7c 	.word	0x08004b7c
 80003dc:	20000190 	.word	0x20000190
 80003e0:	200001f4 	.word	0x200001f4
 80003e4:	2000026c 	.word	0x2000026c
 80003e8:	2000026d 	.word	0x2000026d

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b09e      	sub	sp, #120	@ 0x78
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003f6:	2228      	movs	r2, #40	@ 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f003 ff22 	bl	8004244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000410:	463b      	mov	r3, r7
 8000412:	223c      	movs	r2, #60	@ 0x3c
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 ff14 	bl	8004244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041c:	2301      	movs	r3, #1
 800041e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000420:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000424:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	2301      	movs	r3, #1
 800042c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000432:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000436:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000438:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800043c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000442:	4618      	mov	r0, r3
 8000444:	f000 ff24 	bl	8001290 <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044e:	f000 fa0f 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	230f      	movs	r3, #15
 8000454:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	2302      	movs	r3, #2
 8000458:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000462:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000468:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f001 ff1c 	bl	80022ac <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800047a:	f000 f9f9 	bl	8000870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 800047e:	2305      	movs	r3, #5
 8000480:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f91f 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000498:	f000 f9ea 	bl	8000870 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3778      	adds	r7, #120	@ 0x78
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004aa:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <MX_USART1_UART_Init+0x64>)
 80004ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004ae:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e6:	4807      	ldr	r0, [pc, #28]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004e8:	f002 faa0 	bl	8002a2c <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004f2:	f000 f9bd 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, USART1_RXBuffer, USART1_BUFFER_SIZE);
 80004f6:	2206      	movs	r2, #6
 80004f8:	4904      	ldr	r1, [pc, #16]	@ (800050c <MX_USART1_UART_Init+0x68>)
 80004fa:	4802      	ldr	r0, [pc, #8]	@ (8000504 <MX_USART1_UART_Init+0x60>)
 80004fc:	f002 fbf8 	bl	8002cf0 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000078 	.word	0x20000078
 8000508:	40013800 	.word	0x40013800
 800050c:	20000188 	.word	0x20000188

08000510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000514:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000516:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <MX_USART3_UART_Init+0x64>)
 8000518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000552:	4807      	ldr	r0, [pc, #28]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000554:	f002 fa6a 	bl	8002a2c <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f987 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, USART3_RXBuffer, 1);						// credentials are received 1 char per time
 8000562:	2201      	movs	r2, #1
 8000564:	4904      	ldr	r1, [pc, #16]	@ (8000578 <MX_USART3_UART_Init+0x68>)
 8000566:	4802      	ldr	r0, [pc, #8]	@ (8000570 <MX_USART3_UART_Init+0x60>)
 8000568:	f002 fbc2 	bl	8002cf0 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000100 	.word	0x20000100
 8000574:	40004800 	.word	0x40004800
 8000578:	200001f8 	.word	0x200001f8

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <MX_GPIO_Init+0x114>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a3e      	ldr	r2, [pc, #248]	@ (8000690 <MX_GPIO_Init+0x114>)
 8000598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b3c      	ldr	r3, [pc, #240]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b39      	ldr	r3, [pc, #228]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a38      	ldr	r2, [pc, #224]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a32      	ldr	r2, [pc, #200]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <MX_GPIO_Init+0x114>)
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_GPIO_Init+0x114>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800060a:	2200      	movs	r2, #0
 800060c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000610:	4820      	ldr	r0, [pc, #128]	@ (8000694 <MX_GPIO_Init+0x118>)
 8000612:	f000 fe25 	bl	8001260 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000616:	2337      	movs	r3, #55	@ 0x37
 8000618:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	481a      	ldr	r0, [pc, #104]	@ (8000694 <MX_GPIO_Init+0x118>)
 800062c:	f000 fc9e 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000630:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000634:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_GPIO_Init+0x118>)
 800064a:	f000 fc8f 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 fc82 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000668:	23c0      	movs	r3, #192	@ 0xc0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066c:	2312      	movs	r3, #18
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000678:	2304      	movs	r3, #4
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_GPIO_Init+0x11c>)
 8000684:	f000 fc72 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48001000 	.word	0x48001000
 8000698:	48000400 	.word	0x48000400

0800069c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)		// received command
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a32      	ldr	r2, [pc, #200]	@ (8000774 <HAL_UART_RxCpltCallback+0xd8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d126      	bne.n	80006fc <HAL_UART_RxCpltCallback+0x60>
    {
    	if (strncmp((char*)USART1_RXBuffer, "start\n", USART1_BUFFER_SIZE) == 0)
 80006ae:	2206      	movs	r2, #6
 80006b0:	4931      	ldr	r1, [pc, #196]	@ (8000778 <HAL_UART_RxCpltCallback+0xdc>)
 80006b2:	4832      	ldr	r0, [pc, #200]	@ (800077c <HAL_UART_RxCpltCallback+0xe0>)
 80006b4:	f003 fdce 	bl	8004254 <strncmp>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <HAL_UART_RxCpltCallback+0x2e>
        {
        	flag_on = 1;
 80006be:	4b30      	ldr	r3, [pc, #192]	@ (8000780 <HAL_UART_RxCpltCallback+0xe4>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
        	flag_command = 1;
 80006c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <HAL_UART_RxCpltCallback+0xe8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
        }
    	if (strncmp((char*)USART1_RXBuffer, "stop_\n", USART1_BUFFER_SIZE) == 0)
 80006ca:	2206      	movs	r2, #6
 80006cc:	492e      	ldr	r1, [pc, #184]	@ (8000788 <HAL_UART_RxCpltCallback+0xec>)
 80006ce:	482b      	ldr	r0, [pc, #172]	@ (800077c <HAL_UART_RxCpltCallback+0xe0>)
 80006d0:	f003 fdc0 	bl	8004254 <strncmp>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d105      	bne.n	80006e6 <HAL_UART_RxCpltCallback+0x4a>
        {
        	flag_on = 0;
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <HAL_UART_RxCpltCallback+0xe4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
        	flag_command = 1;
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <HAL_UART_RxCpltCallback+0xe8>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
        }

    	flag_uart1_error = 0;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <HAL_UART_RxCpltCallback+0xf0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
    	flag_uart3_error = 0;
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <HAL_UART_RxCpltCallback+0xf4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, USART1_RXBuffer, USART1_BUFFER_SIZE);					// reset reception
 80006f2:	2206      	movs	r2, #6
 80006f4:	4921      	ldr	r1, [pc, #132]	@ (800077c <HAL_UART_RxCpltCallback+0xe0>)
 80006f6:	4827      	ldr	r0, [pc, #156]	@ (8000794 <HAL_UART_RxCpltCallback+0xf8>)
 80006f8:	f002 fafa 	bl	8002cf0 <HAL_UART_Receive_IT>
    }
    if (huart->Instance == USART3)		// received a credentials char
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <HAL_UART_RxCpltCallback+0xfc>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d132      	bne.n	800076c <HAL_UART_RxCpltCallback+0xd0>
    {
        if (USART3_RXByte == '\n' || USART3_RXByte == '\r' || USART3_RXBufferFull == 1)
 8000706:	4b25      	ldr	r3, [pc, #148]	@ (800079c <HAL_UART_RxCpltCallback+0x100>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b0a      	cmp	r3, #10
 800070c:	d007      	beq.n	800071e <HAL_UART_RxCpltCallback+0x82>
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <HAL_UART_RxCpltCallback+0x100>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	d003      	beq.n	800071e <HAL_UART_RxCpltCallback+0x82>
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <HAL_UART_RxCpltCallback+0x104>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10f      	bne.n	800073e <HAL_UART_RxCpltCallback+0xa2>
        {
            // all credentials char received or buffer full
        	USART3_RXBuffer[USART3_RXidx] = '\0';
 800071e:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <HAL_UART_RxCpltCallback+0x108>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <HAL_UART_RxCpltCallback+0x10c>)
 8000726:	2100      	movs	r1, #0
 8000728:	5499      	strb	r1, [r3, r2]
        	flag_creds = 1;
 800072a:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <HAL_UART_RxCpltCallback+0x110>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
        	USART3_RXidx = 0;
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <HAL_UART_RxCpltCallback+0x108>)
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]
        	USART3_RXBufferFull = 0;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <HAL_UART_RxCpltCallback+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e011      	b.n	8000762 <HAL_UART_RxCpltCallback+0xc6>
        }
        else
        {
        	USART3_RXBuffer[USART3_RXidx++] = USART3_RXByte;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <HAL_UART_RxCpltCallback+0x108>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	b291      	uxth	r1, r2
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <HAL_UART_RxCpltCallback+0x108>)
 8000748:	8011      	strh	r1, [r2, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <HAL_UART_RxCpltCallback+0x100>)
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_UART_RxCpltCallback+0x10c>)
 8000752:	5499      	strb	r1, [r3, r2]
            if (USART3_RXidx >= USART3_BUFFER_SIZE)
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <HAL_UART_RxCpltCallback+0x108>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b63      	cmp	r3, #99	@ 0x63
 800075a:	d902      	bls.n	8000762 <HAL_UART_RxCpltCallback+0xc6>
            {
            	USART3_RXBufferFull = 1;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_UART_RxCpltCallback+0x104>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart3, &USART3_RXByte, 1);								// reset reception
 8000762:	2201      	movs	r2, #1
 8000764:	490d      	ldr	r1, [pc, #52]	@ (800079c <HAL_UART_RxCpltCallback+0x100>)
 8000766:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <HAL_UART_RxCpltCallback+0x114>)
 8000768:	f002 fac2 	bl	8002cf0 <HAL_UART_Receive_IT>
    }
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	08004b84 	.word	0x08004b84
 800077c:	20000188 	.word	0x20000188
 8000780:	20000269 	.word	0x20000269
 8000784:	2000026a 	.word	0x2000026a
 8000788:	08004b8c 	.word	0x08004b8c
 800078c:	2000026c 	.word	0x2000026c
 8000790:	2000026d 	.word	0x2000026d
 8000794:	20000078 	.word	0x20000078
 8000798:	40004800 	.word	0x40004800
 800079c:	2000025c 	.word	0x2000025c
 80007a0:	20000268 	.word	0x20000268
 80007a4:	20000266 	.word	0x20000266
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	2000026b 	.word	0x2000026b
 80007b0:	20000100 	.word	0x20000100

080007b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <HAL_UART_TxCpltCallback+0x44>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d109      	bne.n	80007da <HAL_UART_TxCpltCallback+0x26>
	{
		memset(USART1_TXBuffer, 0, USART1_TXidx);
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_UART_TxCpltCallback+0x48>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	480c      	ldr	r0, [pc, #48]	@ (8000800 <HAL_UART_TxCpltCallback+0x4c>)
 80007d0:	f003 fd38 	bl	8004244 <memset>
		USART1_TXidx = 0;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_UART_TxCpltCallback+0x48>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]
	}
	if (huart->Instance == USART3)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <HAL_UART_TxCpltCallback+0x50>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d104      	bne.n	80007ee <HAL_UART_TxCpltCallback+0x3a>
	{
		memset(USART3_TXBuffer, 0, USART1_BUFFER_SIZE);
 80007e4:	2206      	movs	r2, #6
 80007e6:	2100      	movs	r1, #0
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <HAL_UART_TxCpltCallback+0x54>)
 80007ea:	f003 fd2b 	bl	8004244 <memset>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40013800 	.word	0x40013800
 80007fc:	200001f4 	.word	0x200001f4
 8000800:	20000190 	.word	0x20000190
 8000804:	40004800 	.word	0x40004800
 8000808:	20000260 	.word	0x20000260

0800080c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	// in case of error reset reception
    if (huart->Instance == USART1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <HAL_UART_ErrorCallback+0x44>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d107      	bne.n	800082e <HAL_UART_ErrorCallback+0x22>
    {
        flag_uart1_error = 1;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_UART_ErrorCallback+0x48>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, USART1_RXBuffer, USART1_BUFFER_SIZE);
 8000824:	2206      	movs	r2, #6
 8000826:	490c      	ldr	r1, [pc, #48]	@ (8000858 <HAL_UART_ErrorCallback+0x4c>)
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <HAL_UART_ErrorCallback+0x50>)
 800082a:	f002 fa61 	bl	8002cf0 <HAL_UART_Receive_IT>
    }

    if (huart->Instance == USART3)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <HAL_UART_ErrorCallback+0x54>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d107      	bne.n	8000848 <HAL_UART_ErrorCallback+0x3c>
    {
        flag_uart3_error = 1;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_UART_ErrorCallback+0x58>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &USART3_RXByte, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	4909      	ldr	r1, [pc, #36]	@ (8000868 <HAL_UART_ErrorCallback+0x5c>)
 8000842:	480a      	ldr	r0, [pc, #40]	@ (800086c <HAL_UART_ErrorCallback+0x60>)
 8000844:	f002 fa54 	bl	8002cf0 <HAL_UART_Receive_IT>
    }
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40013800 	.word	0x40013800
 8000854:	2000026c 	.word	0x2000026c
 8000858:	20000188 	.word	0x20000188
 800085c:	20000078 	.word	0x20000078
 8000860:	40004800 	.word	0x40004800
 8000864:	2000026d 	.word	0x2000026d
 8000868:	2000025c 	.word	0x2000025c
 800086c:	20000100 	.word	0x20000100

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 fa9c 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a36      	ldr	r2, [pc, #216]	@ (80009bc <HAL_UART_MspInit+0xf8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d130      	bne.n	8000948 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e6:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a35      	ldr	r2, [pc, #212]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b33      	ldr	r3, [pc, #204]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a2f      	ldr	r2, [pc, #188]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000904:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000916:	2330      	movs	r3, #48	@ 0x30
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000926:	2307      	movs	r3, #7
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4824      	ldr	r0, [pc, #144]	@ (80009c4 <HAL_UART_MspInit+0x100>)
 8000932:	f000 fb1b 	bl	8000f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2025      	movs	r0, #37	@ 0x25
 800093c:	f000 fa63 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fa7c 	bl	8000e3e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000946:	e035      	b.n	80009b4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <HAL_UART_MspInit+0x104>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d130      	bne.n	80009b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a1a      	ldr	r2, [pc, #104]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_UART_MspInit+0xfc>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000982:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000994:	2307      	movs	r3, #7
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <HAL_UART_MspInit+0x108>)
 80009a0:	f000 fae4 	bl	8000f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2027      	movs	r0, #39	@ 0x27
 80009aa:	f000 fa2c 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009ae:	2027      	movs	r0, #39	@ 0x27
 80009b0:	f000 fa45 	bl	8000e3e <HAL_NVIC_EnableIRQ>
}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	@ 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40013800 	.word	0x40013800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000800 	.word	0x48000800
 80009c8:	40004800 	.word	0x40004800
 80009cc:	48000400 	.word	0x48000400

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f8cf 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <USART1_IRQHandler+0x10>)
 8000a36:	f002 f99f 	bl	8002d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000078 	.word	0x20000078

08000a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <USART3_IRQHandler+0x10>)
 8000a4a:	f002 f995 	bl	8002d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000100 	.word	0x20000100

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f003 fbf6 	bl	8004278 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000a000 	.word	0x2000a000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	20000270 	.word	0x20000270
 8000ac0:	200003c0 	.word	0x200003c0

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 fbb5 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fbb1 	bl	8000280 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b2c:	08004c10 	.word	0x08004c10
  ldr r2, =_sbss
 8000b30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b34:	200003c0 	.word	0x200003c0

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f94f 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe90 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f967 	bl	8000e5a <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f92f 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000274 	.word	0x20000274

08000bf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000274 	.word	0x20000274

08000c08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	@ (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e02e      	b.n	8000ee2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d008      	beq.n	8000ea0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2204      	movs	r2, #4
 8000e92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e020      	b.n	8000ee2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 020e 	bic.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d005      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2204      	movs	r2, #4
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e027      	b.n	8000f60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 020e 	bic.w	r2, r2, #14
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    }
  }
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e154      	b.n	8001226 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8146 	beq.w	8001220 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0203 	and.w	r2, r3, #3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a0 	beq.w	8001220 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b58      	ldr	r3, [pc, #352]	@ (8001244 <HAL_GPIO_Init+0x2d8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a57      	ldr	r2, [pc, #348]	@ (8001244 <HAL_GPIO_Init+0x2d8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b55      	ldr	r3, [pc, #340]	@ (8001244 <HAL_GPIO_Init+0x2d8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f8:	4a53      	ldr	r2, [pc, #332]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001122:	d019      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a49      	ldr	r2, [pc, #292]	@ (800124c <HAL_GPIO_Init+0x2e0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a47      	ldr	r2, [pc, #284]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a46      	ldr	r2, [pc, #280]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1dc>
 8001144:	2304      	movs	r3, #4
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001148:	2305      	movs	r3, #5
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800119c:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c6:	4a25      	ldr	r2, [pc, #148]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f0:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f aea3 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800127c:	e002      	b.n	8001284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001296:	af00      	add	r7, sp, #0
 8001298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f000 bff4 	b.w	800229e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 816d 	beq.w	80015a6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012cc:	4bb4      	ldr	r3, [pc, #720]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d00c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d8:	4bb1      	ldr	r3, [pc, #708]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x104>
 80012e4:	4bae      	ldr	r3, [pc, #696]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f0:	d150      	bne.n	8001394 <HAL_RCC_OscConfig+0x104>
 80012f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012f6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001306:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b3f      	cmp	r3, #63	@ 0x3f
 8001312:	d802      	bhi.n	800131a <HAL_RCC_OscConfig+0x8a>
 8001314:	4ba2      	ldr	r3, [pc, #648]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0xb6>
 800131a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800131e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800132e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001332:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001336:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001342:	4b97      	ldr	r3, [pc, #604]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800134a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800134e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800135a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8114 	beq.w	80015a4 <HAL_RCC_OscConfig+0x314>
 800137c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001380:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 810b 	bne.w	80015a4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 bf85 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001398:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x124>
 80013a6:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7d      	ldr	r2, [pc, #500]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e036      	b.n	8001422 <HAL_RCC_OscConfig+0x192>
 80013b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x14e>
 80013c4:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e021      	b.n	8001422 <HAL_RCC_OscConfig+0x192>
 80013de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ee:	d10c      	bne.n	800140a <HAL_RCC_OscConfig+0x17a>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e00b      	b.n	8001422 <HAL_RCC_OscConfig+0x192>
 800140a:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a64      	ldr	r2, [pc, #400]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b62      	ldr	r3, [pc, #392]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a61      	ldr	r2, [pc, #388]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001420:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001422:	4b5f      	ldr	r3, [pc, #380]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	f023 020f 	bic.w	r2, r3, #15
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	495a      	ldr	r1, [pc, #360]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001438:	4313      	orrs	r3, r2
 800143a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d054      	beq.n	80014f6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fbd0 	bl	8000bf0 <HAL_GetTick>
 8001450:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fbcb 	bl	8000bf0 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	@ 0x64
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bf19 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 800146c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001470:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001480:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b3f      	cmp	r3, #63	@ 0x3f
 800148c:	d802      	bhi.n	8001494 <HAL_RCC_OscConfig+0x204>
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0x230>
 8001494:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001498:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80014a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80014b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80014bc:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80014c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80014cc:	fa92 f2a2 	rbit	r2, r2
 80014d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80014d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014d8:	fab2 f282 	clz	r2, r2
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f002 021f 	and.w	r2, r2, #31
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0b0      	beq.n	8001456 <HAL_RCC_OscConfig+0x1c6>
 80014f4:	e057      	b.n	80015a6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb7b 	bl	8000bf0 <HAL_GetTick>
 80014fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb76 	bl	8000bf0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	@ 0x64
 800150e:	d902      	bls.n	8001516 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	f000 bec4 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 8001516:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800151a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800152a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b3f      	cmp	r3, #63	@ 0x3f
 8001536:	d802      	bhi.n	800153e <HAL_RCC_OscConfig+0x2ae>
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x2da>
 800153e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001542:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001552:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001556:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800155a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_RCC_OscConfig+0x310>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800156e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001572:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800157e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f002 021f 	and.w	r2, r2, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1b0      	bne.n	8001500 <HAL_RCC_OscConfig+0x270>
 800159e:	e002      	b.n	80015a6 <HAL_RCC_OscConfig+0x316>
 80015a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 816c 	beq.w	8001894 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015bc:	4bcc      	ldr	r3, [pc, #816]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015c8:	4bc9      	ldr	r3, [pc, #804]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d16d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x420>
 80015d4:	4bc6      	ldr	r3, [pc, #792]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d167      	bne.n	80016b0 <HAL_RCC_OscConfig+0x420>
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80015f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80015fe:	d802      	bhi.n	8001606 <HAL_RCC_OscConfig+0x376>
 8001600:	4bbb      	ldr	r3, [pc, #748]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e013      	b.n	800162e <HAL_RCC_OscConfig+0x39e>
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800161e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800162a:	4bb1      	ldr	r3, [pc, #708]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	2202      	movs	r2, #2
 8001630:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001634:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001638:	fa92 f2a2 	rbit	r2, r2
 800163c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001640:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <HAL_RCC_OscConfig+0x3e6>
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d002      	beq.n	8001676 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	f000 be14 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b9e      	ldr	r3, [pc, #632]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	21f8      	movs	r1, #248	@ 0xf8
 800168c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001694:	fa91 f1a1 	rbit	r1, r1
 8001698:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800169c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80016a0:	fab1 f181 	clz	r1, r1
 80016a4:	b2c9      	uxtb	r1, r1
 80016a6:	408b      	lsls	r3, r1
 80016a8:	4991      	ldr	r1, [pc, #580]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e0f1      	b.n	8001894 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8083 	beq.w	80017c8 <HAL_RCC_OscConfig+0x538>
 80016c2:	2301      	movs	r3, #1
 80016c4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80016d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa7f 	bl	8000bf0 <HAL_GetTick>
 80016f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fa7a 	bl	8000bf0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d902      	bls.n	800170e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	f000 bdc8 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001720:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b3f      	cmp	r3, #63	@ 0x3f
 800172c:	d802      	bhi.n	8001734 <HAL_RCC_OscConfig+0x4a4>
 800172e:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e013      	b.n	800175c <HAL_RCC_OscConfig+0x4cc>
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800174c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	2202      	movs	r2, #2
 800175e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001762:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800176e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0b4      	beq.n	80016f8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	21f8      	movs	r1, #248	@ 0xf8
 80017a4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80017ac:	fa91 f1a1 	rbit	r1, r1
 80017b0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80017b4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80017b8:	fab1 f181 	clz	r1, r1
 80017bc:	b2c9      	uxtb	r1, r1
 80017be:	408b      	lsls	r3, r1
 80017c0:	494b      	ldr	r1, [pc, #300]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
 80017c6:	e065      	b.n	8001894 <HAL_RCC_OscConfig+0x604>
 80017c8:	2301      	movs	r3, #1
 80017ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80017da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f9fc 	bl	8000bf0 <HAL_GetTick>
 80017f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff f9f7 	bl	8000bf0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d902      	bls.n	8001814 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	f000 bd45 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001826:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b3f      	cmp	r3, #63	@ 0x3f
 8001832:	d802      	bhi.n	800183a <HAL_RCC_OscConfig+0x5aa>
 8001834:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e013      	b.n	8001862 <HAL_RCC_OscConfig+0x5d2>
 800183a:	2302      	movs	r3, #2
 800183c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001852:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_RCC_OscConfig+0x660>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	2202      	movs	r2, #2
 8001864:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001868:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800186c:	fa92 f2a2 	rbit	r2, r2
 8001870:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001874:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001878:	fab2 f282 	clz	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f042 0220 	orr.w	r2, r2, #32
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1b4      	bne.n	80017fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8115 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07e      	beq.n	80019b8 <HAL_RCC_OscConfig+0x728>
 80018ba:	2301      	movs	r3, #1
 80018bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80018cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_RCC_OscConfig+0x664>)
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	2301      	movs	r3, #1
 80018e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f984 	bl	8000bf0 <HAL_GetTick>
 80018e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ec:	e00f      	b.n	800190e <HAL_RCC_OscConfig+0x67e>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff f97a 	bl	8000bf0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d902      	bls.n	800190e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	f000 bcc8 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001966:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001968:	4bb0      	ldr	r3, [pc, #704]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 800196a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001974:	2102      	movs	r1, #2
 8001976:	6019      	str	r1, [r3, #0]
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f1a3 	rbit	r1, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800198e:	6019      	str	r1, [r3, #0]
  return result;
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0a0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x668>
 80019b6:	e08d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x844>
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019da:	601a      	str	r2, [r3, #0]
  return result;
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b90      	ldr	r3, [pc, #576]	@ (8001c30 <HAL_RCC_OscConfig+0x9a0>)
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	461a      	mov	r2, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f8f9 	bl	8000bf0 <HAL_GetTick>
 80019fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f8f4 	bl	8000bf0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d902      	bls.n	8001a1a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f000 bc42 	b.w	800229e <HAL_RCC_OscConfig+0x100e>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	4b69      	ldr	r3, [pc, #420]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a92:	2102      	movs	r1, #2
 8001a94:	6019      	str	r1, [r3, #0]
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f1a3 	rbit	r1, r3
 8001aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001aac:	6019      	str	r1, [r3, #0]
  return result;
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d197      	bne.n	8001a04 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 819e 	beq.w	8001e26 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af0:	4b4e      	ldr	r3, [pc, #312]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d116      	bne.n	8001b2a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a4a      	ldr	r2, [pc, #296]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	61d3      	str	r3, [r2, #28]
 8001b08:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b22:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b42      	ldr	r3, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x9a4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11a      	bne.n	8001b6c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b3f      	ldr	r3, [pc, #252]	@ (8001c34 <HAL_RCC_OscConfig+0x9a4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c34 <HAL_RCC_OscConfig+0x9a4>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f855 	bl	8000bf0 <HAL_GetTick>
 8001b46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7ff f850 	bl	8000bf0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	@ 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e39e      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <HAL_RCC_OscConfig+0x9a4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ef      	beq.n	8001b4c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x8fa>
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a2a      	ldr	r2, [pc, #168]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e035      	b.n	8001bf6 <HAL_RCC_OscConfig+0x966>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x924>
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a20      	ldr	r2, [pc, #128]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	e020      	b.n	8001bf6 <HAL_RCC_OscConfig+0x966>
 8001bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x94e>
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a15      	ldr	r2, [pc, #84]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x966>
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <HAL_RCC_OscConfig+0x99c>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7fe fff2 	bl	8000bf0 <HAL_GetTick>
 8001c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e012      	b.n	8001c38 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe ffed 	bl	8000bf0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e339      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	10908120 	.word	0x10908120
 8001c34:	40007000 	.word	0x40007000
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c40:	2202      	movs	r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c7e:	601a      	str	r2, [r3, #0]
  return result;
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xa10>
 8001c9a:	4b98      	ldr	r3, [pc, #608]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0xa38>
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ca8:	2202      	movs	r2, #2
 8001caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4b8d      	ldr	r3, [pc, #564]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ccc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	6011      	str	r1, [r2, #0]
 8001cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	fa92 f1a2 	rbit	r1, r2
 8001ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001cea:	6011      	str	r1, [r2, #0]
  return result;
 8001cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	fab2 f282 	clz	r2, r2
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f43f af7f 	beq.w	8001c12 <HAL_RCC_OscConfig+0x982>
 8001d14:	e07d      	b.n	8001e12 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7fe ff6b 	bl	8000bf0 <HAL_GetTick>
 8001d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7fe ff66 	bl	8000bf0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e2b2      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d64:	2202      	movs	r2, #2
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d7e:	601a      	str	r2, [r3, #0]
  return result;
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0xb10>
 8001d9a:	4b58      	ldr	r3, [pc, #352]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0xb38>
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dcc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	6011      	str	r1, [r2, #0]
 8001dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fa92 f1a2 	rbit	r1, r2
 8001de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001de6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001dea:	6011      	str	r1, [r2, #0]
  return result;
 8001dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d186      	bne.n	8001d20 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e12:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a37      	ldr	r2, [pc, #220]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8232 	beq.w	800229c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	f000 8201 	beq.w	8002248 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	f040 8157 	bne.w	8002106 <HAL_RCC_OscConfig+0xe76>
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e92:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fea7 	bl	8000bf0 <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe fea2 	bl	8000bf0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1f0      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ee0:	601a      	str	r2, [r3, #0]
  return result;
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ef4:	d804      	bhi.n	8001f00 <HAL_RCC_OscConfig+0xc70>
 8001ef6:	4b01      	ldr	r3, [pc, #4]	@ (8001efc <HAL_RCC_OscConfig+0xc6c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e029      	b.n	8001f50 <HAL_RCC_OscConfig+0xcc0>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	4bc3      	ldr	r3, [pc, #780]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f54:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001f58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f5c:	6011      	str	r1, [r2, #0]
 8001f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f62:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fa92 f1a2 	rbit	r1, r2
 8001f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f70:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f74:	6011      	str	r1, [r2, #0]
  return result;
 8001f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f7a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d185      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4baf      	ldr	r3, [pc, #700]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	49a7      	ldr	r1, [pc, #668]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001fe8:	601a      	str	r2, [r3, #0]
  return result;
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ff2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ffe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	2301      	movs	r3, #1
 8002008:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fdf1 	bl	8000bf0 <HAL_GetTick>
 800200e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002012:	e009      	b.n	8002028 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fdec 	bl	8000bf0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e13a      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002048:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002056:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002060:	d802      	bhi.n	8002068 <HAL_RCC_OscConfig+0xdd8>
 8002062:	4b7e      	ldr	r3, [pc, #504]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e027      	b.n	80020b8 <HAL_RCC_OscConfig+0xe28>
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002088:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002096:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4b69      	ldr	r3, [pc, #420]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80020c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020c4:	6011      	str	r1, [r2, #0]
 80020c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fa92 f1a2 	rbit	r1, r2
 80020d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020dc:	6011      	str	r1, [r2, #0]
  return result;
 80020de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f042 0220 	orr.w	r2, r2, #32
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f002 021f 	and.w	r2, r2, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d087      	beq.n	8002014 <HAL_RCC_OscConfig+0xd84>
 8002104:	e0ca      	b.n	800229c <HAL_RCC_OscConfig+0x100c>
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800210e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002134:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002140:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	461a      	mov	r2, r3
 8002148:	2300      	movs	r3, #0
 800214a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe fd50 	bl	8000bf0 <HAL_GetTick>
 8002150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002154:	e009      	b.n	800216a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe fd4b 	bl	8000bf0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e099      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002172:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800218e:	601a      	str	r2, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a2:	d802      	bhi.n	80021aa <HAL_RCC_OscConfig+0xf1a>
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e027      	b.n	80021fa <HAL_RCC_OscConfig+0xf6a>
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80021d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCC_OscConfig+0xfcc>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002202:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800220c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	fa92 f1a2 	rbit	r1, r2
 8002216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800221a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800221e:	6011      	str	r1, [r2, #0]
  return result;
 8002220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002224:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d187      	bne.n	8002156 <HAL_RCC_OscConfig+0xec6>
 8002246:	e029      	b.n	800229c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d103      	bne.n	8002260 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e020      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
 800225c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_RCC_OscConfig+0x1018>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002268:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800226c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002284:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09e      	sub	sp, #120	@ 0x78
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e154      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b89      	ldr	r3, [pc, #548]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b86      	ldr	r3, [pc, #536]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4984      	ldr	r1, [pc, #528]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e13c      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b7b      	ldr	r3, [pc, #492]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4978      	ldr	r1, [pc, #480]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80cd 	beq.w	80024ba <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d137      	bne.n	8002398 <HAL_RCC_ClockConfig+0xec>
 8002328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800232c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002340:	d802      	bhi.n	8002348 <HAL_RCC_ClockConfig+0x9c>
 8002342:	4b6b      	ldr	r3, [pc, #428]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e00f      	b.n	8002368 <HAL_RCC_ClockConfig+0xbc>
 8002348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800234c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	667b      	str	r3, [r7, #100]	@ 0x64
 8002356:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235a:	663b      	str	r3, [r7, #96]	@ 0x60
 800235c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002364:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800236c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800236e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002370:	fa92 f2a2 	rbit	r2, r2
 8002374:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002376:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002378:	fab2 f282 	clz	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f042 0220 	orr.w	r2, r2, #32
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f002 021f 	and.w	r2, r2, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d171      	bne.n	8002478 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ea      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d137      	bne.n	8002410 <HAL_RCC_ClockConfig+0x164>
 80023a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80023b8:	d802      	bhi.n	80023c0 <HAL_RCC_ClockConfig+0x114>
 80023ba:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	e00f      	b.n	80023e0 <HAL_RCC_ClockConfig+0x134>
 80023c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023dc:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80023e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80023ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f002 021f 	and.w	r2, r2, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d135      	bne.n	8002478 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0ae      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
 8002410:	2302      	movs	r3, #2
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b3f      	cmp	r3, #63	@ 0x3f
 8002426:	d802      	bhi.n	800242e <HAL_RCC_ClockConfig+0x182>
 8002428:	4b31      	ldr	r3, [pc, #196]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e00d      	b.n	800244a <HAL_RCC_ClockConfig+0x19e>
 800242e:	2302      	movs	r3, #2
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	2202      	movs	r2, #2
 800244c:	61ba      	str	r2, [r7, #24]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	617a      	str	r2, [r7, #20]
  return result;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07a      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002478:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 0203 	bic.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	491a      	ldr	r1, [pc, #104]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248a:	f7fe fbb1 	bl	8000bf0 <HAL_GetTick>
 800248e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe fbad 	bl	8000bf0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e062      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_ClockConfig+0x244>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 020c 	and.w	r2, r3, #12
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1eb      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d215      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <HAL_RCC_ClockConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d006      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e041      	b.n	800256e <HAL_RCC_ClockConfig+0x2c2>
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <HAL_RCC_ClockConfig+0x2cc>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	491a      	ldr	r1, [pc, #104]	@ (8002578 <HAL_RCC_ClockConfig+0x2cc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <HAL_RCC_ClockConfig+0x2cc>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4912      	ldr	r1, [pc, #72]	@ (8002578 <HAL_RCC_ClockConfig+0x2cc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002532:	f000 f829 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002536:	4601      	mov	r1, r0
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <HAL_RCC_ClockConfig+0x2cc>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002540:	22f0      	movs	r2, #240	@ 0xf0
 8002542:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	60fa      	str	r2, [r7, #12]
  return result;
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	40d3      	lsrs	r3, r2
 8002556:	4a09      	ldr	r2, [pc, #36]	@ (800257c <HAL_RCC_ClockConfig+0x2d0>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	fa21 f303 	lsr.w	r3, r1, r3
 800255e:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <HAL_RCC_ClockConfig+0x2d4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <HAL_RCC_ClockConfig+0x2d8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fafe 	bl	8000b68 <HAL_InitTick>
  
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3778      	adds	r7, #120	@ 0x78
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	08004b94 	.word	0x08004b94
 8002580:	20000000 	.word	0x20000000
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x36>
 80025b6:	e026      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e026      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
      break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 8002608:	613b      	str	r3, [r7, #16]
      break;
 800260a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260c:	693b      	ldr	r3, [r7, #16]
}
 800260e:	4618      	mov	r0, r3
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	08004bac 	.word	0x08004bac
 8002628:	08004bbc 	.word	0x08004bbc
 800262c:	003d0900 	.word	0x003d0900

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800264e:	f7ff ffef 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002652:	4601      	mov	r1, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800265c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002660:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	603a      	str	r2, [r7, #0]
  return result;
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	40d3      	lsrs	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	08004ba4 	.word	0x08004ba4

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002692:	f7ff ffcd 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002696:	4601      	mov	r1, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80026a0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80026a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	fa92 f2a2 	rbit	r2, r2
 80026ac:	603a      	str	r2, [r7, #0]
  return result;
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	40d3      	lsrs	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08004ba4 	.word	0x08004ba4

080026d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b092      	sub	sp, #72	@ 0x48
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80d2 	beq.w	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f4:	4b4d      	ldr	r3, [pc, #308]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b4a      	ldr	r3, [pc, #296]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a49      	ldr	r2, [pc, #292]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	61d3      	str	r3, [r2, #28]
 800270c:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d118      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a40      	ldr	r2, [pc, #256]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7fe fa5b 	bl	8000bf0 <HAL_GetTick>
 800273a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe fa57 	bl	8000bf0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b64      	cmp	r3, #100	@ 0x64
 800274a:	d901      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e167      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b37      	ldr	r3, [pc, #220]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800275c:	4b33      	ldr	r3, [pc, #204]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8082 	beq.w	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002778:	429a      	cmp	r2, r3
 800277a:	d07a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	461a      	mov	r2, r3
 80027a6:	2301      	movs	r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	461a      	mov	r2, r3
 80027ca:	2300      	movs	r3, #0
 80027cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d049      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fa07 	bl	8000bf0 <HAL_GetTick>
 80027e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fa03 	bl	8000bf0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e111      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80027fc:	2302      	movs	r3, #2
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	61fb      	str	r3, [r7, #28]
  return result;
 8002814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002826:	4b01      	ldr	r3, [pc, #4]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	e00d      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
 8002834:	10908100 	.word	0x10908100
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	4b78      	ldr	r3, [pc, #480]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	2202      	movs	r2, #2
 800284a:	613a      	str	r2, [r7, #16]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	60fa      	str	r2, [r7, #12]
  return result;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f002 021f 	and.w	r2, r2, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0b9      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002872:	4b6d      	ldr	r3, [pc, #436]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	496a      	ldr	r1, [pc, #424]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002880:	4313      	orrs	r3, r2
 8002882:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002884:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b66      	ldr	r3, [pc, #408]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4a65      	ldr	r2, [pc, #404]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002896:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a4:	4b60      	ldr	r3, [pc, #384]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	f023 0203 	bic.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	495d      	ldr	r1, [pc, #372]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c2:	4b59      	ldr	r3, [pc, #356]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4956      	ldr	r1, [pc, #344]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e0:	4b51      	ldr	r3, [pc, #324]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	494e      	ldr	r1, [pc, #312]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f023 0210 	bic.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4947      	ldr	r1, [pc, #284]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800291c:	4b42      	ldr	r3, [pc, #264]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	493f      	ldr	r1, [pc, #252]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f023 0220 	bic.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4938      	ldr	r1, [pc, #224]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002948:	4313      	orrs	r3, r2
 800294a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002958:	4b33      	ldr	r3, [pc, #204]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	4930      	ldr	r1, [pc, #192]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002966:	4313      	orrs	r3, r2
 8002968:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002976:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4929      	ldr	r1, [pc, #164]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002984:	4313      	orrs	r3, r2
 8002986:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002994:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	4921      	ldr	r1, [pc, #132]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	491a      	ldr	r1, [pc, #104]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	4912      	ldr	r1, [pc, #72]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	490b      	ldr	r1, [pc, #44]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3748      	adds	r7, #72	@ 0x48
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e040      	b.n	8002ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd ff38 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	@ 0x24
 8002a58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fe46 	bl	8003704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fc6f 	bl	800335c <UART_SetConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e01b      	b.n	8002ac0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fec5 	bl	8003848 <UART_CheckIdleState>
 8002abe:	4603      	mov	r3, r0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	@ 0x28
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 80a3 	bne.w	8002c2a <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Receive+0x28>
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e09b      	b.n	8002c2c <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2222      	movs	r2, #34	@ 0x22
 8002b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f871 	bl	8000bf0 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b28:	d10e      	bne.n	8002b48 <HAL_UART_Receive+0x80>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_UART_Receive+0x76>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b3c:	e01a      	b.n	8002b74 <HAL_UART_Receive+0xac>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b46:	e015      	b.n	8002b74 <HAL_UART_Receive+0xac>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_UART_Receive+0xa4>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_UART_Receive+0x9a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	22ff      	movs	r2, #255	@ 0xff
 8002b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b60:	e008      	b.n	8002b74 <HAL_UART_Receive+0xac>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	227f      	movs	r2, #127	@ 0x7f
 8002b66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b6a:	e003      	b.n	8002b74 <HAL_UART_Receive+0xac>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Receive+0xd0>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ba0:	e037      	b.n	8002c12 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2120      	movs	r1, #32
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fef3 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e033      	b.n	8002c2c <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	3302      	adds	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e00d      	b.n	8002c00 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1c1      	bne.n	8002ba2 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b08b      	sub	sp, #44	@ 0x2c
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d147      	bne.n	8002cda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_UART_Transmit_IT+0x22>
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e040      	b.n	8002cdc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2221      	movs	r2, #33	@ 0x21
 8002c82:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8c:	d107      	bne.n	8002c9e <HAL_UART_Transmit_IT+0x6a>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a13      	ldr	r2, [pc, #76]	@ (8002ce8 <HAL_UART_Transmit_IT+0xb4>)
 8002c9a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002c9c:	e002      	b.n	8002ca4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <HAL_UART_Transmit_IT+0xb8>)
 8002ca2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e6      	bne.n	8002ca4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	372c      	adds	r7, #44	@ 0x2c
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	08003d87 	.word	0x08003d87
 8002cec:	08003cd1 	.word	0x08003cd1

08002cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d132      	bne.n	8002d6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Receive_IT+0x24>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e02b      	b.n	8002d70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d018      	beq.n	8002d5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e6      	bne.n	8002d2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	461a      	mov	r2, r3
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fe85 	bl	8003a74 <UART_Start_Receive_IT>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	@ 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002da2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002da6:	4013      	ands	r3, r2
 8002da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d115      	bne.n	8002de0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 82ab 	beq.w	800332c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
      }
      return;
 8002dde:	e2a5      	b.n	800332c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8117 	beq.w	8003018 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002dfa:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_UART_IRQHandler+0x298>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 810a 	beq.w	8003018 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d011      	beq.n	8002e34 <HAL_UART_IRQHandler+0xbc>
 8002e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d011      	beq.n	8002e64 <HAL_UART_IRQHandler+0xec>
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d011      	beq.n	8002e94 <HAL_UART_IRQHandler+0x11c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <HAL_UART_IRQHandler+0x18a>
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8211 	beq.w	8003330 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d005      	beq.n	8002f5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d04f      	beq.n	8002ffa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fe3e 	bl	8003bdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6a:	2b40      	cmp	r3, #64	@ 0x40
 8002f6c:	d141      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1d9      	bne.n	8002f6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d013      	beq.n	8002fea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	4a13      	ldr	r2, [pc, #76]	@ (8003014 <HAL_UART_IRQHandler+0x29c>)
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff8d 	bl	8000eee <HAL_DMA_Abort_IT>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e00f      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fc0e 	bl	800080c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e00b      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fc0a 	bl	800080c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	e007      	b.n	800300a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fc06 	bl	800080c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003008:	e192      	b.n	8003330 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300a:	bf00      	nop
    return;
 800300c:	e190      	b.n	8003330 <HAL_UART_IRQHandler+0x5b8>
 800300e:	bf00      	nop
 8003010:	04000120 	.word	0x04000120
 8003014:	08003ca5 	.word	0x08003ca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	2b01      	cmp	r3, #1
 800301e:	f040 814b 	bne.w	80032b8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8144 	beq.w	80032b8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 813d 	beq.w	80032b8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2210      	movs	r2, #16
 8003044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003050:	2b40      	cmp	r3, #64	@ 0x40
 8003052:	f040 80b5 	bne.w	80031c0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8164 	beq.w	8003334 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003076:	429a      	cmp	r2, r3
 8003078:	f080 815c 	bcs.w	8003334 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b20      	cmp	r3, #32
 800308e:	f000 8086 	beq.w	800319e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1da      	bne.n	8003092 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3308      	adds	r3, #8
 80030fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003100:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003104:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003108:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e1      	bne.n	80030dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800312a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800312e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3308      	adds	r3, #8
 8003138:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800313c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800313e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003142:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800314a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e3      	bne.n	8003118 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800316c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003182:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800318e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e4      	bne.n	800315e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd fe6a 	bl	8000e72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8c3 	bl	8003344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031be:	e0b9      	b.n	8003334 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80ab 	beq.w	8003338 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80031e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80a6 	beq.w	8003338 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003210:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e4      	bne.n	80031ec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	623b      	str	r3, [r7, #32]
   return(result);
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003246:	633a      	str	r2, [r7, #48]	@ 0x30
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800324c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e3      	bne.n	8003222 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	60fb      	str	r3, [r7, #12]
   return(result);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0310 	bic.w	r3, r3, #16
 8003282:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	617b      	str	r3, [r7, #20]
   return(result);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e4      	bne.n	800326e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f847 	bl	8003344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032b6:	e03f      	b.n	8003338 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56a>
 80032c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80032d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 ff85 	bl	80041ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032e0:	e02d      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01c      	beq.n	800333c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
    }
    return;
 800330a:	e017      	b.n	800333c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_UART_IRQHandler+0x5c6>
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fd8e 	bl	8003e46 <UART_EndTransmit_IT>
    return;
 800332a:	e008      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
      return;
 800332c:	bf00      	nop
 800332e:	e006      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003330:	bf00      	nop
 8003332:	e004      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003334:	bf00      	nop
 8003336:	e002      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003338:	bf00      	nop
 800333a:	e000      	b.n	800333e <HAL_UART_IRQHandler+0x5c6>
    return;
 800333c:	bf00      	nop
  }

}
 800333e:	37e8      	adds	r7, #232	@ 0xe8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800338a:	f023 030c 	bic.w	r3, r3, #12
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	430b      	orrs	r3, r1
 8003396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4aa7      	ldr	r2, [pc, #668]	@ (8003674 <UART_SetConfig+0x318>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d120      	bne.n	800341e <UART_SetConfig+0xc2>
 80033dc:	4ba6      	ldr	r3, [pc, #664]	@ (8003678 <UART_SetConfig+0x31c>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d817      	bhi.n	8003418 <UART_SetConfig+0xbc>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0x94>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	0800340d 	.word	0x0800340d
 80033f8:	08003413 	.word	0x08003413
 80033fc:	08003407 	.word	0x08003407
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e0b5      	b.n	8003572 <UART_SetConfig+0x216>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e0b2      	b.n	8003572 <UART_SetConfig+0x216>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e0af      	b.n	8003572 <UART_SetConfig+0x216>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e0ac      	b.n	8003572 <UART_SetConfig+0x216>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e0a9      	b.n	8003572 <UART_SetConfig+0x216>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a96      	ldr	r2, [pc, #600]	@ (800367c <UART_SetConfig+0x320>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d124      	bne.n	8003472 <UART_SetConfig+0x116>
 8003428:	4b93      	ldr	r3, [pc, #588]	@ (8003678 <UART_SetConfig+0x31c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003430:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003434:	d011      	beq.n	800345a <UART_SetConfig+0xfe>
 8003436:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800343a:	d817      	bhi.n	800346c <UART_SetConfig+0x110>
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003440:	d011      	beq.n	8003466 <UART_SetConfig+0x10a>
 8003442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003446:	d811      	bhi.n	800346c <UART_SetConfig+0x110>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0xf8>
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003450:	d006      	beq.n	8003460 <UART_SetConfig+0x104>
 8003452:	e00b      	b.n	800346c <UART_SetConfig+0x110>
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e08b      	b.n	8003572 <UART_SetConfig+0x216>
 800345a:	2302      	movs	r3, #2
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e088      	b.n	8003572 <UART_SetConfig+0x216>
 8003460:	2304      	movs	r3, #4
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e085      	b.n	8003572 <UART_SetConfig+0x216>
 8003466:	2308      	movs	r3, #8
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e082      	b.n	8003572 <UART_SetConfig+0x216>
 800346c:	2310      	movs	r3, #16
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e07f      	b.n	8003572 <UART_SetConfig+0x216>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a82      	ldr	r2, [pc, #520]	@ (8003680 <UART_SetConfig+0x324>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d124      	bne.n	80034c6 <UART_SetConfig+0x16a>
 800347c:	4b7e      	ldr	r3, [pc, #504]	@ (8003678 <UART_SetConfig+0x31c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003484:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003488:	d011      	beq.n	80034ae <UART_SetConfig+0x152>
 800348a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800348e:	d817      	bhi.n	80034c0 <UART_SetConfig+0x164>
 8003490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003494:	d011      	beq.n	80034ba <UART_SetConfig+0x15e>
 8003496:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800349a:	d811      	bhi.n	80034c0 <UART_SetConfig+0x164>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x14c>
 80034a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a4:	d006      	beq.n	80034b4 <UART_SetConfig+0x158>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x164>
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e061      	b.n	8003572 <UART_SetConfig+0x216>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e05e      	b.n	8003572 <UART_SetConfig+0x216>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e05b      	b.n	8003572 <UART_SetConfig+0x216>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e058      	b.n	8003572 <UART_SetConfig+0x216>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e055      	b.n	8003572 <UART_SetConfig+0x216>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003684 <UART_SetConfig+0x328>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d124      	bne.n	800351a <UART_SetConfig+0x1be>
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <UART_SetConfig+0x31c>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80034d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034dc:	d011      	beq.n	8003502 <UART_SetConfig+0x1a6>
 80034de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034e2:	d817      	bhi.n	8003514 <UART_SetConfig+0x1b8>
 80034e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x1b2>
 80034ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ee:	d811      	bhi.n	8003514 <UART_SetConfig+0x1b8>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <UART_SetConfig+0x1a0>
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f8:	d006      	beq.n	8003508 <UART_SetConfig+0x1ac>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x1b8>
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e037      	b.n	8003572 <UART_SetConfig+0x216>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e034      	b.n	8003572 <UART_SetConfig+0x216>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e031      	b.n	8003572 <UART_SetConfig+0x216>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e02e      	b.n	8003572 <UART_SetConfig+0x216>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e02b      	b.n	8003572 <UART_SetConfig+0x216>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5a      	ldr	r2, [pc, #360]	@ (8003688 <UART_SetConfig+0x32c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d124      	bne.n	800356e <UART_SetConfig+0x212>
 8003524:	4b54      	ldr	r3, [pc, #336]	@ (8003678 <UART_SetConfig+0x31c>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800352c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003530:	d011      	beq.n	8003556 <UART_SetConfig+0x1fa>
 8003532:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003536:	d817      	bhi.n	8003568 <UART_SetConfig+0x20c>
 8003538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800353c:	d011      	beq.n	8003562 <UART_SetConfig+0x206>
 800353e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003542:	d811      	bhi.n	8003568 <UART_SetConfig+0x20c>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x1f4>
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354c:	d006      	beq.n	800355c <UART_SetConfig+0x200>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x20c>
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e00d      	b.n	8003572 <UART_SetConfig+0x216>
 8003556:	2302      	movs	r3, #2
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e00a      	b.n	8003572 <UART_SetConfig+0x216>
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e007      	b.n	8003572 <UART_SetConfig+0x216>
 8003562:	2308      	movs	r3, #8
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e004      	b.n	8003572 <UART_SetConfig+0x216>
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e001      	b.n	8003572 <UART_SetConfig+0x216>
 800356e:	2310      	movs	r3, #16
 8003570:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800357a:	d15b      	bne.n	8003634 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b08      	cmp	r3, #8
 8003580:	d827      	bhi.n	80035d2 <UART_SetConfig+0x276>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <UART_SetConfig+0x22c>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035d3 	.word	0x080035d3
 8003598:	080035c3 	.word	0x080035c3
 800359c:	080035d3 	.word	0x080035d3
 80035a0:	080035d3 	.word	0x080035d3
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035cb 	.word	0x080035cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7ff f84c 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 80035b0:	61b8      	str	r0, [r7, #24]
        break;
 80035b2:	e013      	b.n	80035dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7ff f86a 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 80035b8:	61b8      	str	r0, [r7, #24]
        break;
 80035ba:	e00f      	b.n	80035dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b33      	ldr	r3, [pc, #204]	@ (800368c <UART_SetConfig+0x330>)
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e00c      	b.n	80035dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7fe ffe1 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 80035c6:	61b8      	str	r0, [r7, #24]
        break;
 80035c8:	e008      	b.n	80035dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ce:	61bb      	str	r3, [r7, #24]
        break;
 80035d0:	e004      	b.n	80035dc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	77bb      	strb	r3, [r7, #30]
        break;
 80035da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8082 	beq.w	80036e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	005a      	lsls	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	441a      	add	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d916      	bls.n	800362e <UART_SetConfig+0x2d2>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003606:	d212      	bcs.n	800362e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f023 030f 	bic.w	r3, r3, #15
 8003610:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	b29a      	uxth	r2, r3
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	4313      	orrs	r3, r2
 8003622:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	89fa      	ldrh	r2, [r7, #14]
 800362a:	60da      	str	r2, [r3, #12]
 800362c:	e05c      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	77bb      	strb	r3, [r7, #30]
 8003632:	e059      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d835      	bhi.n	80036a6 <UART_SetConfig+0x34a>
 800363a:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <UART_SetConfig+0x2e4>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003665 	.word	0x08003665
 8003644:	0800366d 	.word	0x0800366d
 8003648:	08003691 	.word	0x08003691
 800364c:	080036a7 	.word	0x080036a7
 8003650:	08003697 	.word	0x08003697
 8003654:	080036a7 	.word	0x080036a7
 8003658:	080036a7 	.word	0x080036a7
 800365c:	080036a7 	.word	0x080036a7
 8003660:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fff0 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003668:	61b8      	str	r0, [r7, #24]
        break;
 800366a:	e021      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800366c:	f7ff f80e 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8003670:	61b8      	str	r0, [r7, #24]
        break;
 8003672:	e01d      	b.n	80036b0 <UART_SetConfig+0x354>
 8003674:	40013800 	.word	0x40013800
 8003678:	40021000 	.word	0x40021000
 800367c:	40004400 	.word	0x40004400
 8003680:	40004800 	.word	0x40004800
 8003684:	40004c00 	.word	0x40004c00
 8003688:	40005000 	.word	0x40005000
 800368c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <UART_SetConfig+0x3a4>)
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe ff77 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 800369a:	61b8      	str	r0, [r7, #24]
        break;
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77bb      	strb	r3, [r7, #30]
        break;
 80036ae:	bf00      	nop
    }

    if (pclk != 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085a      	lsrs	r2, r3, #1
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d909      	bls.n	80036e4 <UART_SetConfig+0x388>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d6:	d205      	bcs.n	80036e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e001      	b.n	80036e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	007a1200 	.word	0x007a1200

08003704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003802:	d10a      	bne.n	800381a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b098      	sub	sp, #96	@ 0x60
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003858:	f7fd f9ca 	bl	8000bf0 <HAL_GetTick>
 800385c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d12e      	bne.n	80038ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f88c 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d021      	beq.n	80038ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389a:	653b      	str	r3, [r7, #80]	@ 0x50
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e062      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d149      	bne.n	800396c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f856 	bl	8003998 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03c      	beq.n	800396c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
 8003912:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60fb      	str	r3, [r7, #12]
   return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003944:	61fa      	str	r2, [r7, #28]
 8003946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	617b      	str	r3, [r7, #20]
   return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e011      	b.n	8003990 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3758      	adds	r7, #88	@ 0x58
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	e04f      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d04b      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fd f91d 	bl	8000bf0 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e04e      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d037      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d034      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d031      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d110      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8ed 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2208      	movs	r2, #8
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e029      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a24:	d111      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8d3 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d0a0      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b097      	sub	sp, #92	@ 0x5c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d10e      	bne.n	8003ac6 <UART_Start_Receive_IT+0x52>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <UART_Start_Receive_IT+0x48>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003aba:	e01a      	b.n	8003af2 <UART_Start_Receive_IT+0x7e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	@ 0xff
 8003ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ac4:	e015      	b.n	8003af2 <UART_Start_Receive_IT+0x7e>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <UART_Start_Receive_IT+0x76>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <UART_Start_Receive_IT+0x6c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22ff      	movs	r2, #255	@ 0xff
 8003ada:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ade:	e008      	b.n	8003af2 <UART_Start_Receive_IT+0x7e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	227f      	movs	r2, #127	@ 0x7f
 8003ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ae8:	e003      	b.n	8003af2 <UART_Start_Receive_IT+0x7e>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	@ 0x22
 8003afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b22:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003b24:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e5      	bne.n	8003b02 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3e:	d107      	bne.n	8003b50 <UART_Start_Receive_IT+0xdc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <UART_Start_Receive_IT+0x160>)
 8003b4c:	669a      	str	r2, [r3, #104]	@ 0x68
 8003b4e:	e002      	b.n	8003b56 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <UART_Start_Receive_IT+0x164>)
 8003b54:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d019      	beq.n	8003b92 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e6      	bne.n	8003b5e <UART_Start_Receive_IT+0xea>
 8003b90:	e018      	b.n	8003bc4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f043 0320 	orr.w	r3, r3, #32
 8003ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	69f9      	ldr	r1, [r7, #28]
 8003bb6:	6a3a      	ldr	r2, [r7, #32]
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e6      	bne.n	8003b92 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	375c      	adds	r7, #92	@ 0x5c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	08004043 	.word	0x08004043
 8003bd8:	08003e9b 	.word	0x08003e9b

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b095      	sub	sp, #84	@ 0x54
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e6      	bne.n	8003be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d118      	bne.n	8003c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c98:	bf00      	nop
 8003c9a:	3754      	adds	r7, #84	@ 0x54
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7fc fda2 	bl	800080c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b08f      	sub	sp, #60	@ 0x3c
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cdc:	2b21      	cmp	r3, #33	@ 0x21
 8003cde:	d14c      	bne.n	8003d7a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d132      	bne.n	8003d52 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6979      	ldr	r1, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d50:	e013      	b.n	8003d7a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003d7a:	bf00      	nop
 8003d7c:	373c      	adds	r7, #60	@ 0x3c
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b091      	sub	sp, #68	@ 0x44
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d92:	2b21      	cmp	r3, #33	@ 0x21
 8003d94:	d151      	bne.n	8003e3a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d132      	bne.n	8003e08 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	623b      	str	r3, [r7, #32]
   return(result);
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e6      	bne.n	8003da2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	69b9      	ldr	r1, [r7, #24]
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e06:	e018      	b.n	8003e3a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003e3a:	bf00      	nop
 8003e3c:	3744      	adds	r7, #68	@ 0x44
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b088      	sub	sp, #32
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e6      	bne.n	8003e4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fc fc91 	bl	80007b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e92:	bf00      	nop
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b09c      	sub	sp, #112	@ 0x70
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ea8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb2:	2b22      	cmp	r3, #34	@ 0x22
 8003eb4:	f040 80b9 	bne.w	800402a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ebe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ec2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ec6:	b2d9      	uxtb	r1, r3
 8003ec8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 809c 	bne.w	800403a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e6      	bne.n	8003f02 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f54:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	623b      	str	r3, [r7, #32]
   return(result);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e6      	bne.n	8003f8a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d12e      	bne.n	8004022 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	69b9      	ldr	r1, [r7, #24]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e6      	bne.n	8003fca <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d103      	bne.n	8004012 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2210      	movs	r2, #16
 8004010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff f992 	bl	8003344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004020:	e00b      	b.n	800403a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fb3a 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8004028:	e007      	b.n	800403a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	619a      	str	r2, [r3, #24]
}
 800403a:	bf00      	nop
 800403c:	3770      	adds	r7, #112	@ 0x70
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b09c      	sub	sp, #112	@ 0x70
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004050:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800405a:	2b22      	cmp	r3, #34	@ 0x22
 800405c:	f040 80b9 	bne.w	80041d2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004066:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004070:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004074:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004078:	4013      	ands	r3, r2
 800407a:	b29a      	uxth	r2, r3
 800407c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800407e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	1c9a      	adds	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f040 809c 	bne.w	80041e2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80040b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040be:	667b      	str	r3, [r7, #100]	@ 0x64
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80040ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80040d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004152:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	2b01      	cmp	r3, #1
 800416a:	d12e      	bne.n	80041ca <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	613b      	str	r3, [r7, #16]
   return(result);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d103      	bne.n	80041ba <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2210      	movs	r2, #16
 80041b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff f8be 	bl	8003344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041c8:	e00b      	b.n	80041e2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc fa66 	bl	800069c <HAL_UART_RxCpltCallback>
}
 80041d0:	e007      	b.n	80041e2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0208 	orr.w	r2, r2, #8
 80041e0:	619a      	str	r2, [r3, #24]
}
 80041e2:	bf00      	nop
 80041e4:	3770      	adds	r7, #112	@ 0x70
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	b510      	push	{r4, lr}
 8004204:	b09d      	sub	sp, #116	@ 0x74
 8004206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004208:	9002      	str	r0, [sp, #8]
 800420a:	9006      	str	r0, [sp, #24]
 800420c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004210:	480a      	ldr	r0, [pc, #40]	@ (800423c <siprintf+0x3c>)
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	9104      	str	r1, [sp, #16]
 8004216:	490a      	ldr	r1, [pc, #40]	@ (8004240 <siprintf+0x40>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	2400      	movs	r4, #0
 8004220:	a902      	add	r1, sp, #8
 8004222:	6800      	ldr	r0, [r0, #0]
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004228:	f000 f9a6 	bl	8004578 <_svfiprintf_r>
 800422c:	9b02      	ldr	r3, [sp, #8]
 800422e:	701c      	strb	r4, [r3, #0]
 8004230:	b01d      	add	sp, #116	@ 0x74
 8004232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004236:	b003      	add	sp, #12
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000000c 	.word	0x2000000c
 8004240:	ffff0208 	.word	0xffff0208

08004244 <memset>:
 8004244:	4402      	add	r2, r0
 8004246:	4603      	mov	r3, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	d100      	bne.n	800424e <memset+0xa>
 800424c:	4770      	bx	lr
 800424e:	f803 1b01 	strb.w	r1, [r3], #1
 8004252:	e7f9      	b.n	8004248 <memset+0x4>

08004254 <strncmp>:
 8004254:	b510      	push	{r4, lr}
 8004256:	b16a      	cbz	r2, 8004274 <strncmp+0x20>
 8004258:	3901      	subs	r1, #1
 800425a:	1884      	adds	r4, r0, r2
 800425c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004260:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004264:	429a      	cmp	r2, r3
 8004266:	d103      	bne.n	8004270 <strncmp+0x1c>
 8004268:	42a0      	cmp	r0, r4
 800426a:	d001      	beq.n	8004270 <strncmp+0x1c>
 800426c:	2a00      	cmp	r2, #0
 800426e:	d1f5      	bne.n	800425c <strncmp+0x8>
 8004270:	1ad0      	subs	r0, r2, r3
 8004272:	bd10      	pop	{r4, pc}
 8004274:	4610      	mov	r0, r2
 8004276:	e7fc      	b.n	8004272 <strncmp+0x1e>

08004278 <__errno>:
 8004278:	4b01      	ldr	r3, [pc, #4]	@ (8004280 <__errno+0x8>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	2000000c 	.word	0x2000000c

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	4d0d      	ldr	r5, [pc, #52]	@ (80042bc <__libc_init_array+0x38>)
 8004288:	4c0d      	ldr	r4, [pc, #52]	@ (80042c0 <__libc_init_array+0x3c>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	2600      	movs	r6, #0
 8004290:	42a6      	cmp	r6, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	4d0b      	ldr	r5, [pc, #44]	@ (80042c4 <__libc_init_array+0x40>)
 8004296:	4c0c      	ldr	r4, [pc, #48]	@ (80042c8 <__libc_init_array+0x44>)
 8004298:	f000 fc64 	bl	8004b64 <_init>
 800429c:	1b64      	subs	r4, r4, r5
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	2600      	movs	r6, #0
 80042a2:	42a6      	cmp	r6, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ac:	4798      	blx	r3
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b6:	4798      	blx	r3
 80042b8:	3601      	adds	r6, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	08004c08 	.word	0x08004c08
 80042c0:	08004c08 	.word	0x08004c08
 80042c4:	08004c08 	.word	0x08004c08
 80042c8:	08004c0c 	.word	0x08004c0c

080042cc <__retarget_lock_acquire_recursive>:
 80042cc:	4770      	bx	lr

080042ce <__retarget_lock_release_recursive>:
 80042ce:	4770      	bx	lr

080042d0 <_free_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4605      	mov	r5, r0
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d041      	beq.n	800435c <_free_r+0x8c>
 80042d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042dc:	1f0c      	subs	r4, r1, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bfb8      	it	lt
 80042e2:	18e4      	addlt	r4, r4, r3
 80042e4:	f000 f8e0 	bl	80044a8 <__malloc_lock>
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <_free_r+0x90>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	b933      	cbnz	r3, 80042fc <_free_r+0x2c>
 80042ee:	6063      	str	r3, [r4, #4]
 80042f0:	6014      	str	r4, [r2, #0]
 80042f2:	4628      	mov	r0, r5
 80042f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042f8:	f000 b8dc 	b.w	80044b4 <__malloc_unlock>
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d908      	bls.n	8004312 <_free_r+0x42>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	1821      	adds	r1, r4, r0
 8004304:	428b      	cmp	r3, r1
 8004306:	bf01      	itttt	eq
 8004308:	6819      	ldreq	r1, [r3, #0]
 800430a:	685b      	ldreq	r3, [r3, #4]
 800430c:	1809      	addeq	r1, r1, r0
 800430e:	6021      	streq	r1, [r4, #0]
 8004310:	e7ed      	b.n	80042ee <_free_r+0x1e>
 8004312:	461a      	mov	r2, r3
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	b10b      	cbz	r3, 800431c <_free_r+0x4c>
 8004318:	42a3      	cmp	r3, r4
 800431a:	d9fa      	bls.n	8004312 <_free_r+0x42>
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	1850      	adds	r0, r2, r1
 8004320:	42a0      	cmp	r0, r4
 8004322:	d10b      	bne.n	800433c <_free_r+0x6c>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	4401      	add	r1, r0
 8004328:	1850      	adds	r0, r2, r1
 800432a:	4283      	cmp	r3, r0
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	d1e0      	bne.n	80042f2 <_free_r+0x22>
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	6053      	str	r3, [r2, #4]
 8004336:	4408      	add	r0, r1
 8004338:	6010      	str	r0, [r2, #0]
 800433a:	e7da      	b.n	80042f2 <_free_r+0x22>
 800433c:	d902      	bls.n	8004344 <_free_r+0x74>
 800433e:	230c      	movs	r3, #12
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	e7d6      	b.n	80042f2 <_free_r+0x22>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	1821      	adds	r1, r4, r0
 8004348:	428b      	cmp	r3, r1
 800434a:	bf04      	itt	eq
 800434c:	6819      	ldreq	r1, [r3, #0]
 800434e:	685b      	ldreq	r3, [r3, #4]
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	bf04      	itt	eq
 8004354:	1809      	addeq	r1, r1, r0
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	6054      	str	r4, [r2, #4]
 800435a:	e7ca      	b.n	80042f2 <_free_r+0x22>
 800435c:	bd38      	pop	{r3, r4, r5, pc}
 800435e:	bf00      	nop
 8004360:	200003bc 	.word	0x200003bc

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0f      	ldr	r6, [pc, #60]	@ (80043a4 <sbrk_aligned+0x40>)
 8004368:	460c      	mov	r4, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	4605      	mov	r5, r0
 800436e:	b911      	cbnz	r1, 8004376 <sbrk_aligned+0x12>
 8004370:	f000 fba4 	bl	8004abc <_sbrk_r>
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fb9f 	bl	8004abc <_sbrk_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d103      	bne.n	800438a <sbrk_aligned+0x26>
 8004382:	f04f 34ff 	mov.w	r4, #4294967295
 8004386:	4620      	mov	r0, r4
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	1cc4      	adds	r4, r0, #3
 800438c:	f024 0403 	bic.w	r4, r4, #3
 8004390:	42a0      	cmp	r0, r4
 8004392:	d0f8      	beq.n	8004386 <sbrk_aligned+0x22>
 8004394:	1a21      	subs	r1, r4, r0
 8004396:	4628      	mov	r0, r5
 8004398:	f000 fb90 	bl	8004abc <_sbrk_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d1f2      	bne.n	8004386 <sbrk_aligned+0x22>
 80043a0:	e7ef      	b.n	8004382 <sbrk_aligned+0x1e>
 80043a2:	bf00      	nop
 80043a4:	200003b8 	.word	0x200003b8

080043a8 <_malloc_r>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	1ccd      	adds	r5, r1, #3
 80043ae:	f025 0503 	bic.w	r5, r5, #3
 80043b2:	3508      	adds	r5, #8
 80043b4:	2d0c      	cmp	r5, #12
 80043b6:	bf38      	it	cc
 80043b8:	250c      	movcc	r5, #12
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	4606      	mov	r6, r0
 80043be:	db01      	blt.n	80043c4 <_malloc_r+0x1c>
 80043c0:	42a9      	cmp	r1, r5
 80043c2:	d904      	bls.n	80043ce <_malloc_r+0x26>
 80043c4:	230c      	movs	r3, #12
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	2000      	movs	r0, #0
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044a4 <_malloc_r+0xfc>
 80043d2:	f000 f869 	bl	80044a8 <__malloc_lock>
 80043d6:	f8d8 3000 	ldr.w	r3, [r8]
 80043da:	461c      	mov	r4, r3
 80043dc:	bb44      	cbnz	r4, 8004430 <_malloc_r+0x88>
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ffbf 	bl	8004364 <sbrk_aligned>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	4604      	mov	r4, r0
 80043ea:	d158      	bne.n	800449e <_malloc_r+0xf6>
 80043ec:	f8d8 4000 	ldr.w	r4, [r8]
 80043f0:	4627      	mov	r7, r4
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	d143      	bne.n	800447e <_malloc_r+0xd6>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d04b      	beq.n	8004492 <_malloc_r+0xea>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4639      	mov	r1, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	eb04 0903 	add.w	r9, r4, r3
 8004404:	f000 fb5a 	bl	8004abc <_sbrk_r>
 8004408:	4581      	cmp	r9, r0
 800440a:	d142      	bne.n	8004492 <_malloc_r+0xea>
 800440c:	6821      	ldr	r1, [r4, #0]
 800440e:	1a6d      	subs	r5, r5, r1
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffa6 	bl	8004364 <sbrk_aligned>
 8004418:	3001      	adds	r0, #1
 800441a:	d03a      	beq.n	8004492 <_malloc_r+0xea>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	442b      	add	r3, r5
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	f8d8 3000 	ldr.w	r3, [r8]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	bb62      	cbnz	r2, 8004484 <_malloc_r+0xdc>
 800442a:	f8c8 7000 	str.w	r7, [r8]
 800442e:	e00f      	b.n	8004450 <_malloc_r+0xa8>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	1b52      	subs	r2, r2, r5
 8004434:	d420      	bmi.n	8004478 <_malloc_r+0xd0>
 8004436:	2a0b      	cmp	r2, #11
 8004438:	d917      	bls.n	800446a <_malloc_r+0xc2>
 800443a:	1961      	adds	r1, r4, r5
 800443c:	42a3      	cmp	r3, r4
 800443e:	6025      	str	r5, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	6059      	strne	r1, [r3, #4]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	bf08      	it	eq
 8004448:	f8c8 1000 	streq.w	r1, [r8]
 800444c:	5162      	str	r2, [r4, r5]
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f82f 	bl	80044b4 <__malloc_unlock>
 8004456:	f104 000b 	add.w	r0, r4, #11
 800445a:	1d23      	adds	r3, r4, #4
 800445c:	f020 0007 	bic.w	r0, r0, #7
 8004460:	1ac2      	subs	r2, r0, r3
 8004462:	bf1c      	itt	ne
 8004464:	1a1b      	subne	r3, r3, r0
 8004466:	50a3      	strne	r3, [r4, r2]
 8004468:	e7af      	b.n	80043ca <_malloc_r+0x22>
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	42a3      	cmp	r3, r4
 800446e:	bf0c      	ite	eq
 8004470:	f8c8 2000 	streq.w	r2, [r8]
 8004474:	605a      	strne	r2, [r3, #4]
 8004476:	e7eb      	b.n	8004450 <_malloc_r+0xa8>
 8004478:	4623      	mov	r3, r4
 800447a:	6864      	ldr	r4, [r4, #4]
 800447c:	e7ae      	b.n	80043dc <_malloc_r+0x34>
 800447e:	463c      	mov	r4, r7
 8004480:	687f      	ldr	r7, [r7, #4]
 8004482:	e7b6      	b.n	80043f2 <_malloc_r+0x4a>
 8004484:	461a      	mov	r2, r3
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	d1fb      	bne.n	8004484 <_malloc_r+0xdc>
 800448c:	2300      	movs	r3, #0
 800448e:	6053      	str	r3, [r2, #4]
 8004490:	e7de      	b.n	8004450 <_malloc_r+0xa8>
 8004492:	230c      	movs	r3, #12
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f80c 	bl	80044b4 <__malloc_unlock>
 800449c:	e794      	b.n	80043c8 <_malloc_r+0x20>
 800449e:	6005      	str	r5, [r0, #0]
 80044a0:	e7d6      	b.n	8004450 <_malloc_r+0xa8>
 80044a2:	bf00      	nop
 80044a4:	200003bc 	.word	0x200003bc

080044a8 <__malloc_lock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	@ (80044b0 <__malloc_lock+0x8>)
 80044aa:	f7ff bf0f 	b.w	80042cc <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	200003b4 	.word	0x200003b4

080044b4 <__malloc_unlock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	@ (80044bc <__malloc_unlock+0x8>)
 80044b6:	f7ff bf0a 	b.w	80042ce <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	200003b4 	.word	0x200003b4

080044c0 <__ssputs_r>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	688e      	ldr	r6, [r1, #8]
 80044c6:	461f      	mov	r7, r3
 80044c8:	42be      	cmp	r6, r7
 80044ca:	680b      	ldr	r3, [r1, #0]
 80044cc:	4682      	mov	sl, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	4690      	mov	r8, r2
 80044d2:	d82d      	bhi.n	8004530 <__ssputs_r+0x70>
 80044d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044dc:	d026      	beq.n	800452c <__ssputs_r+0x6c>
 80044de:	6965      	ldr	r5, [r4, #20]
 80044e0:	6909      	ldr	r1, [r1, #16]
 80044e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044e6:	eba3 0901 	sub.w	r9, r3, r1
 80044ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ee:	1c7b      	adds	r3, r7, #1
 80044f0:	444b      	add	r3, r9
 80044f2:	106d      	asrs	r5, r5, #1
 80044f4:	429d      	cmp	r5, r3
 80044f6:	bf38      	it	cc
 80044f8:	461d      	movcc	r5, r3
 80044fa:	0553      	lsls	r3, r2, #21
 80044fc:	d527      	bpl.n	800454e <__ssputs_r+0x8e>
 80044fe:	4629      	mov	r1, r5
 8004500:	f7ff ff52 	bl	80043a8 <_malloc_r>
 8004504:	4606      	mov	r6, r0
 8004506:	b360      	cbz	r0, 8004562 <__ssputs_r+0xa2>
 8004508:	6921      	ldr	r1, [r4, #16]
 800450a:	464a      	mov	r2, r9
 800450c:	f000 fae6 	bl	8004adc <memcpy>
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	6126      	str	r6, [r4, #16]
 800451e:	6165      	str	r5, [r4, #20]
 8004520:	444e      	add	r6, r9
 8004522:	eba5 0509 	sub.w	r5, r5, r9
 8004526:	6026      	str	r6, [r4, #0]
 8004528:	60a5      	str	r5, [r4, #8]
 800452a:	463e      	mov	r6, r7
 800452c:	42be      	cmp	r6, r7
 800452e:	d900      	bls.n	8004532 <__ssputs_r+0x72>
 8004530:	463e      	mov	r6, r7
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	4632      	mov	r2, r6
 8004536:	4641      	mov	r1, r8
 8004538:	f000 faa6 	bl	8004a88 <memmove>
 800453c:	68a3      	ldr	r3, [r4, #8]
 800453e:	1b9b      	subs	r3, r3, r6
 8004540:	60a3      	str	r3, [r4, #8]
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	4433      	add	r3, r6
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2000      	movs	r0, #0
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	462a      	mov	r2, r5
 8004550:	f000 fad2 	bl	8004af8 <_realloc_r>
 8004554:	4606      	mov	r6, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d1e0      	bne.n	800451c <__ssputs_r+0x5c>
 800455a:	6921      	ldr	r1, [r4, #16]
 800455c:	4650      	mov	r0, sl
 800455e:	f7ff feb7 	bl	80042d0 <_free_r>
 8004562:	230c      	movs	r3, #12
 8004564:	f8ca 3000 	str.w	r3, [sl]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e7e9      	b.n	800454a <__ssputs_r+0x8a>
	...

08004578 <_svfiprintf_r>:
 8004578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	4698      	mov	r8, r3
 800457e:	898b      	ldrh	r3, [r1, #12]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	b09d      	sub	sp, #116	@ 0x74
 8004584:	4607      	mov	r7, r0
 8004586:	460d      	mov	r5, r1
 8004588:	4614      	mov	r4, r2
 800458a:	d510      	bpl.n	80045ae <_svfiprintf_r+0x36>
 800458c:	690b      	ldr	r3, [r1, #16]
 800458e:	b973      	cbnz	r3, 80045ae <_svfiprintf_r+0x36>
 8004590:	2140      	movs	r1, #64	@ 0x40
 8004592:	f7ff ff09 	bl	80043a8 <_malloc_r>
 8004596:	6028      	str	r0, [r5, #0]
 8004598:	6128      	str	r0, [r5, #16]
 800459a:	b930      	cbnz	r0, 80045aa <_svfiprintf_r+0x32>
 800459c:	230c      	movs	r3, #12
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	b01d      	add	sp, #116	@ 0x74
 80045a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045aa:	2340      	movs	r3, #64	@ 0x40
 80045ac:	616b      	str	r3, [r5, #20]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045b2:	2320      	movs	r3, #32
 80045b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80045bc:	2330      	movs	r3, #48	@ 0x30
 80045be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800475c <_svfiprintf_r+0x1e4>
 80045c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045c6:	f04f 0901 	mov.w	r9, #1
 80045ca:	4623      	mov	r3, r4
 80045cc:	469a      	mov	sl, r3
 80045ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d2:	b10a      	cbz	r2, 80045d8 <_svfiprintf_r+0x60>
 80045d4:	2a25      	cmp	r2, #37	@ 0x25
 80045d6:	d1f9      	bne.n	80045cc <_svfiprintf_r+0x54>
 80045d8:	ebba 0b04 	subs.w	fp, sl, r4
 80045dc:	d00b      	beq.n	80045f6 <_svfiprintf_r+0x7e>
 80045de:	465b      	mov	r3, fp
 80045e0:	4622      	mov	r2, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	4638      	mov	r0, r7
 80045e6:	f7ff ff6b 	bl	80044c0 <__ssputs_r>
 80045ea:	3001      	adds	r0, #1
 80045ec:	f000 80a7 	beq.w	800473e <_svfiprintf_r+0x1c6>
 80045f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045f2:	445a      	add	r2, fp
 80045f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045f6:	f89a 3000 	ldrb.w	r3, [sl]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 809f 	beq.w	800473e <_svfiprintf_r+0x1c6>
 8004600:	2300      	movs	r3, #0
 8004602:	f04f 32ff 	mov.w	r2, #4294967295
 8004606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800460a:	f10a 0a01 	add.w	sl, sl, #1
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	9307      	str	r3, [sp, #28]
 8004612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004616:	931a      	str	r3, [sp, #104]	@ 0x68
 8004618:	4654      	mov	r4, sl
 800461a:	2205      	movs	r2, #5
 800461c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004620:	484e      	ldr	r0, [pc, #312]	@ (800475c <_svfiprintf_r+0x1e4>)
 8004622:	f7fb fddd 	bl	80001e0 <memchr>
 8004626:	9a04      	ldr	r2, [sp, #16]
 8004628:	b9d8      	cbnz	r0, 8004662 <_svfiprintf_r+0xea>
 800462a:	06d0      	lsls	r0, r2, #27
 800462c:	bf44      	itt	mi
 800462e:	2320      	movmi	r3, #32
 8004630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004634:	0711      	lsls	r1, r2, #28
 8004636:	bf44      	itt	mi
 8004638:	232b      	movmi	r3, #43	@ 0x2b
 800463a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800463e:	f89a 3000 	ldrb.w	r3, [sl]
 8004642:	2b2a      	cmp	r3, #42	@ 0x2a
 8004644:	d015      	beq.n	8004672 <_svfiprintf_r+0xfa>
 8004646:	9a07      	ldr	r2, [sp, #28]
 8004648:	4654      	mov	r4, sl
 800464a:	2000      	movs	r0, #0
 800464c:	f04f 0c0a 	mov.w	ip, #10
 8004650:	4621      	mov	r1, r4
 8004652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004656:	3b30      	subs	r3, #48	@ 0x30
 8004658:	2b09      	cmp	r3, #9
 800465a:	d94b      	bls.n	80046f4 <_svfiprintf_r+0x17c>
 800465c:	b1b0      	cbz	r0, 800468c <_svfiprintf_r+0x114>
 800465e:	9207      	str	r2, [sp, #28]
 8004660:	e014      	b.n	800468c <_svfiprintf_r+0x114>
 8004662:	eba0 0308 	sub.w	r3, r0, r8
 8004666:	fa09 f303 	lsl.w	r3, r9, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	46a2      	mov	sl, r4
 8004670:	e7d2      	b.n	8004618 <_svfiprintf_r+0xa0>
 8004672:	9b03      	ldr	r3, [sp, #12]
 8004674:	1d19      	adds	r1, r3, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	9103      	str	r1, [sp, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfbb      	ittet	lt
 800467e:	425b      	neglt	r3, r3
 8004680:	f042 0202 	orrlt.w	r2, r2, #2
 8004684:	9307      	strge	r3, [sp, #28]
 8004686:	9307      	strlt	r3, [sp, #28]
 8004688:	bfb8      	it	lt
 800468a:	9204      	strlt	r2, [sp, #16]
 800468c:	7823      	ldrb	r3, [r4, #0]
 800468e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004690:	d10a      	bne.n	80046a8 <_svfiprintf_r+0x130>
 8004692:	7863      	ldrb	r3, [r4, #1]
 8004694:	2b2a      	cmp	r3, #42	@ 0x2a
 8004696:	d132      	bne.n	80046fe <_svfiprintf_r+0x186>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046a4:	3402      	adds	r4, #2
 80046a6:	9305      	str	r3, [sp, #20]
 80046a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800476c <_svfiprintf_r+0x1f4>
 80046ac:	7821      	ldrb	r1, [r4, #0]
 80046ae:	2203      	movs	r2, #3
 80046b0:	4650      	mov	r0, sl
 80046b2:	f7fb fd95 	bl	80001e0 <memchr>
 80046b6:	b138      	cbz	r0, 80046c8 <_svfiprintf_r+0x150>
 80046b8:	9b04      	ldr	r3, [sp, #16]
 80046ba:	eba0 000a 	sub.w	r0, r0, sl
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	4082      	lsls	r2, r0
 80046c2:	4313      	orrs	r3, r2
 80046c4:	3401      	adds	r4, #1
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046cc:	4824      	ldr	r0, [pc, #144]	@ (8004760 <_svfiprintf_r+0x1e8>)
 80046ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046d2:	2206      	movs	r2, #6
 80046d4:	f7fb fd84 	bl	80001e0 <memchr>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d036      	beq.n	800474a <_svfiprintf_r+0x1d2>
 80046dc:	4b21      	ldr	r3, [pc, #132]	@ (8004764 <_svfiprintf_r+0x1ec>)
 80046de:	bb1b      	cbnz	r3, 8004728 <_svfiprintf_r+0x1b0>
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	3307      	adds	r3, #7
 80046e4:	f023 0307 	bic.w	r3, r3, #7
 80046e8:	3308      	adds	r3, #8
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ee:	4433      	add	r3, r6
 80046f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f2:	e76a      	b.n	80045ca <_svfiprintf_r+0x52>
 80046f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f8:	460c      	mov	r4, r1
 80046fa:	2001      	movs	r0, #1
 80046fc:	e7a8      	b.n	8004650 <_svfiprintf_r+0xd8>
 80046fe:	2300      	movs	r3, #0
 8004700:	3401      	adds	r4, #1
 8004702:	9305      	str	r3, [sp, #20]
 8004704:	4619      	mov	r1, r3
 8004706:	f04f 0c0a 	mov.w	ip, #10
 800470a:	4620      	mov	r0, r4
 800470c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004710:	3a30      	subs	r2, #48	@ 0x30
 8004712:	2a09      	cmp	r2, #9
 8004714:	d903      	bls.n	800471e <_svfiprintf_r+0x1a6>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0c6      	beq.n	80046a8 <_svfiprintf_r+0x130>
 800471a:	9105      	str	r1, [sp, #20]
 800471c:	e7c4      	b.n	80046a8 <_svfiprintf_r+0x130>
 800471e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004722:	4604      	mov	r4, r0
 8004724:	2301      	movs	r3, #1
 8004726:	e7f0      	b.n	800470a <_svfiprintf_r+0x192>
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	462a      	mov	r2, r5
 800472e:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <_svfiprintf_r+0x1f0>)
 8004730:	a904      	add	r1, sp, #16
 8004732:	4638      	mov	r0, r7
 8004734:	f3af 8000 	nop.w
 8004738:	1c42      	adds	r2, r0, #1
 800473a:	4606      	mov	r6, r0
 800473c:	d1d6      	bne.n	80046ec <_svfiprintf_r+0x174>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	065b      	lsls	r3, r3, #25
 8004742:	f53f af2d 	bmi.w	80045a0 <_svfiprintf_r+0x28>
 8004746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004748:	e72c      	b.n	80045a4 <_svfiprintf_r+0x2c>
 800474a:	ab03      	add	r3, sp, #12
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462a      	mov	r2, r5
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <_svfiprintf_r+0x1f0>)
 8004752:	a904      	add	r1, sp, #16
 8004754:	4638      	mov	r0, r7
 8004756:	f000 f879 	bl	800484c <_printf_i>
 800475a:	e7ed      	b.n	8004738 <_svfiprintf_r+0x1c0>
 800475c:	08004bcc 	.word	0x08004bcc
 8004760:	08004bd6 	.word	0x08004bd6
 8004764:	00000000 	.word	0x00000000
 8004768:	080044c1 	.word	0x080044c1
 800476c:	08004bd2 	.word	0x08004bd2

08004770 <_printf_common>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	4616      	mov	r6, r2
 8004776:	4698      	mov	r8, r3
 8004778:	688a      	ldr	r2, [r1, #8]
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004780:	4293      	cmp	r3, r2
 8004782:	bfb8      	it	lt
 8004784:	4613      	movlt	r3, r2
 8004786:	6033      	str	r3, [r6, #0]
 8004788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800478c:	4607      	mov	r7, r0
 800478e:	460c      	mov	r4, r1
 8004790:	b10a      	cbz	r2, 8004796 <_printf_common+0x26>
 8004792:	3301      	adds	r3, #1
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	0699      	lsls	r1, r3, #26
 800479a:	bf42      	ittt	mi
 800479c:	6833      	ldrmi	r3, [r6, #0]
 800479e:	3302      	addmi	r3, #2
 80047a0:	6033      	strmi	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	f015 0506 	ands.w	r5, r5, #6
 80047a8:	d106      	bne.n	80047b8 <_printf_common+0x48>
 80047aa:	f104 0a19 	add.w	sl, r4, #25
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	6832      	ldr	r2, [r6, #0]
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc26      	bgt.n	8004806 <_printf_common+0x96>
 80047b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	3b00      	subs	r3, #0
 80047c0:	bf18      	it	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	0692      	lsls	r2, r2, #26
 80047c6:	d42b      	bmi.n	8004820 <_printf_common+0xb0>
 80047c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047cc:	4641      	mov	r1, r8
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c8      	blx	r9
 80047d2:	3001      	adds	r0, #1
 80047d4:	d01e      	beq.n	8004814 <_printf_common+0xa4>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf02      	ittt	eq
 80047e2:	68e5      	ldreq	r5, [r4, #12]
 80047e4:	6833      	ldreq	r3, [r6, #0]
 80047e6:	1aed      	subeq	r5, r5, r3
 80047e8:	68a3      	ldr	r3, [r4, #8]
 80047ea:	bf0c      	ite	eq
 80047ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f0:	2500      	movne	r5, #0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	bfc4      	itt	gt
 80047f6:	1a9b      	subgt	r3, r3, r2
 80047f8:	18ed      	addgt	r5, r5, r3
 80047fa:	2600      	movs	r6, #0
 80047fc:	341a      	adds	r4, #26
 80047fe:	42b5      	cmp	r5, r6
 8004800:	d11a      	bne.n	8004838 <_printf_common+0xc8>
 8004802:	2000      	movs	r0, #0
 8004804:	e008      	b.n	8004818 <_printf_common+0xa8>
 8004806:	2301      	movs	r3, #1
 8004808:	4652      	mov	r2, sl
 800480a:	4641      	mov	r1, r8
 800480c:	4638      	mov	r0, r7
 800480e:	47c8      	blx	r9
 8004810:	3001      	adds	r0, #1
 8004812:	d103      	bne.n	800481c <_printf_common+0xac>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481c:	3501      	adds	r5, #1
 800481e:	e7c6      	b.n	80047ae <_printf_common+0x3e>
 8004820:	18e1      	adds	r1, r4, r3
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	2030      	movs	r0, #48	@ 0x30
 8004826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800482a:	4422      	add	r2, r4
 800482c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004834:	3302      	adds	r3, #2
 8004836:	e7c7      	b.n	80047c8 <_printf_common+0x58>
 8004838:	2301      	movs	r3, #1
 800483a:	4622      	mov	r2, r4
 800483c:	4641      	mov	r1, r8
 800483e:	4638      	mov	r0, r7
 8004840:	47c8      	blx	r9
 8004842:	3001      	adds	r0, #1
 8004844:	d0e6      	beq.n	8004814 <_printf_common+0xa4>
 8004846:	3601      	adds	r6, #1
 8004848:	e7d9      	b.n	80047fe <_printf_common+0x8e>
	...

0800484c <_printf_i>:
 800484c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	7e0f      	ldrb	r7, [r1, #24]
 8004852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004854:	2f78      	cmp	r7, #120	@ 0x78
 8004856:	4691      	mov	r9, r2
 8004858:	4680      	mov	r8, r0
 800485a:	460c      	mov	r4, r1
 800485c:	469a      	mov	sl, r3
 800485e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004862:	d807      	bhi.n	8004874 <_printf_i+0x28>
 8004864:	2f62      	cmp	r7, #98	@ 0x62
 8004866:	d80a      	bhi.n	800487e <_printf_i+0x32>
 8004868:	2f00      	cmp	r7, #0
 800486a:	f000 80d1 	beq.w	8004a10 <_printf_i+0x1c4>
 800486e:	2f58      	cmp	r7, #88	@ 0x58
 8004870:	f000 80b8 	beq.w	80049e4 <_printf_i+0x198>
 8004874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800487c:	e03a      	b.n	80048f4 <_printf_i+0xa8>
 800487e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004882:	2b15      	cmp	r3, #21
 8004884:	d8f6      	bhi.n	8004874 <_printf_i+0x28>
 8004886:	a101      	add	r1, pc, #4	@ (adr r1, 800488c <_printf_i+0x40>)
 8004888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048f9 	.word	0x080048f9
 8004894:	08004875 	.word	0x08004875
 8004898:	08004875 	.word	0x08004875
 800489c:	08004875 	.word	0x08004875
 80048a0:	08004875 	.word	0x08004875
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	08004875 	.word	0x08004875
 80048ac:	08004875 	.word	0x08004875
 80048b0:	08004875 	.word	0x08004875
 80048b4:	08004875 	.word	0x08004875
 80048b8:	080049f7 	.word	0x080049f7
 80048bc:	08004923 	.word	0x08004923
 80048c0:	080049b1 	.word	0x080049b1
 80048c4:	08004875 	.word	0x08004875
 80048c8:	08004875 	.word	0x08004875
 80048cc:	08004a19 	.word	0x08004a19
 80048d0:	08004875 	.word	0x08004875
 80048d4:	08004923 	.word	0x08004923
 80048d8:	08004875 	.word	0x08004875
 80048dc:	08004875 	.word	0x08004875
 80048e0:	080049b9 	.word	0x080049b9
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6032      	str	r2, [r6, #0]
 80048ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048f4:	2301      	movs	r3, #1
 80048f6:	e09c      	b.n	8004a32 <_printf_i+0x1e6>
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	1d19      	adds	r1, r3, #4
 80048fe:	6031      	str	r1, [r6, #0]
 8004900:	0606      	lsls	r6, r0, #24
 8004902:	d501      	bpl.n	8004908 <_printf_i+0xbc>
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	e003      	b.n	8004910 <_printf_i+0xc4>
 8004908:	0645      	lsls	r5, r0, #25
 800490a:	d5fb      	bpl.n	8004904 <_printf_i+0xb8>
 800490c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004910:	2d00      	cmp	r5, #0
 8004912:	da03      	bge.n	800491c <_printf_i+0xd0>
 8004914:	232d      	movs	r3, #45	@ 0x2d
 8004916:	426d      	negs	r5, r5
 8004918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491c:	4858      	ldr	r0, [pc, #352]	@ (8004a80 <_printf_i+0x234>)
 800491e:	230a      	movs	r3, #10
 8004920:	e011      	b.n	8004946 <_printf_i+0xfa>
 8004922:	6821      	ldr	r1, [r4, #0]
 8004924:	6833      	ldr	r3, [r6, #0]
 8004926:	0608      	lsls	r0, r1, #24
 8004928:	f853 5b04 	ldr.w	r5, [r3], #4
 800492c:	d402      	bmi.n	8004934 <_printf_i+0xe8>
 800492e:	0649      	lsls	r1, r1, #25
 8004930:	bf48      	it	mi
 8004932:	b2ad      	uxthmi	r5, r5
 8004934:	2f6f      	cmp	r7, #111	@ 0x6f
 8004936:	4852      	ldr	r0, [pc, #328]	@ (8004a80 <_printf_i+0x234>)
 8004938:	6033      	str	r3, [r6, #0]
 800493a:	bf14      	ite	ne
 800493c:	230a      	movne	r3, #10
 800493e:	2308      	moveq	r3, #8
 8004940:	2100      	movs	r1, #0
 8004942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004946:	6866      	ldr	r6, [r4, #4]
 8004948:	60a6      	str	r6, [r4, #8]
 800494a:	2e00      	cmp	r6, #0
 800494c:	db05      	blt.n	800495a <_printf_i+0x10e>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	432e      	orrs	r6, r5
 8004952:	f021 0104 	bic.w	r1, r1, #4
 8004956:	6021      	str	r1, [r4, #0]
 8004958:	d04b      	beq.n	80049f2 <_printf_i+0x1a6>
 800495a:	4616      	mov	r6, r2
 800495c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004960:	fb03 5711 	mls	r7, r3, r1, r5
 8004964:	5dc7      	ldrb	r7, [r0, r7]
 8004966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800496a:	462f      	mov	r7, r5
 800496c:	42bb      	cmp	r3, r7
 800496e:	460d      	mov	r5, r1
 8004970:	d9f4      	bls.n	800495c <_printf_i+0x110>
 8004972:	2b08      	cmp	r3, #8
 8004974:	d10b      	bne.n	800498e <_printf_i+0x142>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	07df      	lsls	r7, r3, #31
 800497a:	d508      	bpl.n	800498e <_printf_i+0x142>
 800497c:	6923      	ldr	r3, [r4, #16]
 800497e:	6861      	ldr	r1, [r4, #4]
 8004980:	4299      	cmp	r1, r3
 8004982:	bfde      	ittt	le
 8004984:	2330      	movle	r3, #48	@ 0x30
 8004986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800498a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800498e:	1b92      	subs	r2, r2, r6
 8004990:	6122      	str	r2, [r4, #16]
 8004992:	f8cd a000 	str.w	sl, [sp]
 8004996:	464b      	mov	r3, r9
 8004998:	aa03      	add	r2, sp, #12
 800499a:	4621      	mov	r1, r4
 800499c:	4640      	mov	r0, r8
 800499e:	f7ff fee7 	bl	8004770 <_printf_common>
 80049a2:	3001      	adds	r0, #1
 80049a4:	d14a      	bne.n	8004a3c <_printf_i+0x1f0>
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295
 80049aa:	b004      	add	sp, #16
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	4832      	ldr	r0, [pc, #200]	@ (8004a84 <_printf_i+0x238>)
 80049ba:	2778      	movs	r7, #120	@ 0x78
 80049bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	6831      	ldr	r1, [r6, #0]
 80049c4:	061f      	lsls	r7, r3, #24
 80049c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ca:	d402      	bmi.n	80049d2 <_printf_i+0x186>
 80049cc:	065f      	lsls	r7, r3, #25
 80049ce:	bf48      	it	mi
 80049d0:	b2ad      	uxthmi	r5, r5
 80049d2:	6031      	str	r1, [r6, #0]
 80049d4:	07d9      	lsls	r1, r3, #31
 80049d6:	bf44      	itt	mi
 80049d8:	f043 0320 	orrmi.w	r3, r3, #32
 80049dc:	6023      	strmi	r3, [r4, #0]
 80049de:	b11d      	cbz	r5, 80049e8 <_printf_i+0x19c>
 80049e0:	2310      	movs	r3, #16
 80049e2:	e7ad      	b.n	8004940 <_printf_i+0xf4>
 80049e4:	4826      	ldr	r0, [pc, #152]	@ (8004a80 <_printf_i+0x234>)
 80049e6:	e7e9      	b.n	80049bc <_printf_i+0x170>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	e7f6      	b.n	80049e0 <_printf_i+0x194>
 80049f2:	4616      	mov	r6, r2
 80049f4:	e7bd      	b.n	8004972 <_printf_i+0x126>
 80049f6:	6833      	ldr	r3, [r6, #0]
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	6961      	ldr	r1, [r4, #20]
 80049fc:	1d18      	adds	r0, r3, #4
 80049fe:	6030      	str	r0, [r6, #0]
 8004a00:	062e      	lsls	r6, r5, #24
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	d501      	bpl.n	8004a0a <_printf_i+0x1be>
 8004a06:	6019      	str	r1, [r3, #0]
 8004a08:	e002      	b.n	8004a10 <_printf_i+0x1c4>
 8004a0a:	0668      	lsls	r0, r5, #25
 8004a0c:	d5fb      	bpl.n	8004a06 <_printf_i+0x1ba>
 8004a0e:	8019      	strh	r1, [r3, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	6123      	str	r3, [r4, #16]
 8004a14:	4616      	mov	r6, r2
 8004a16:	e7bc      	b.n	8004992 <_printf_i+0x146>
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	6032      	str	r2, [r6, #0]
 8004a1e:	681e      	ldr	r6, [r3, #0]
 8004a20:	6862      	ldr	r2, [r4, #4]
 8004a22:	2100      	movs	r1, #0
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7fb fbdb 	bl	80001e0 <memchr>
 8004a2a:	b108      	cbz	r0, 8004a30 <_printf_i+0x1e4>
 8004a2c:	1b80      	subs	r0, r0, r6
 8004a2e:	6060      	str	r0, [r4, #4]
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	2300      	movs	r3, #0
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a3a:	e7aa      	b.n	8004992 <_printf_i+0x146>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	4632      	mov	r2, r6
 8004a40:	4649      	mov	r1, r9
 8004a42:	4640      	mov	r0, r8
 8004a44:	47d0      	blx	sl
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0ad      	beq.n	80049a6 <_printf_i+0x15a>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	079b      	lsls	r3, r3, #30
 8004a4e:	d413      	bmi.n	8004a78 <_printf_i+0x22c>
 8004a50:	68e0      	ldr	r0, [r4, #12]
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	4298      	cmp	r0, r3
 8004a56:	bfb8      	it	lt
 8004a58:	4618      	movlt	r0, r3
 8004a5a:	e7a6      	b.n	80049aa <_printf_i+0x15e>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4632      	mov	r2, r6
 8004a60:	4649      	mov	r1, r9
 8004a62:	4640      	mov	r0, r8
 8004a64:	47d0      	blx	sl
 8004a66:	3001      	adds	r0, #1
 8004a68:	d09d      	beq.n	80049a6 <_printf_i+0x15a>
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	68e3      	ldr	r3, [r4, #12]
 8004a6e:	9903      	ldr	r1, [sp, #12]
 8004a70:	1a5b      	subs	r3, r3, r1
 8004a72:	42ab      	cmp	r3, r5
 8004a74:	dcf2      	bgt.n	8004a5c <_printf_i+0x210>
 8004a76:	e7eb      	b.n	8004a50 <_printf_i+0x204>
 8004a78:	2500      	movs	r5, #0
 8004a7a:	f104 0619 	add.w	r6, r4, #25
 8004a7e:	e7f5      	b.n	8004a6c <_printf_i+0x220>
 8004a80:	08004bdd 	.word	0x08004bdd
 8004a84:	08004bee 	.word	0x08004bee

08004a88 <memmove>:
 8004a88:	4288      	cmp	r0, r1
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	eb01 0402 	add.w	r4, r1, r2
 8004a90:	d902      	bls.n	8004a98 <memmove+0x10>
 8004a92:	4284      	cmp	r4, r0
 8004a94:	4623      	mov	r3, r4
 8004a96:	d807      	bhi.n	8004aa8 <memmove+0x20>
 8004a98:	1e43      	subs	r3, r0, #1
 8004a9a:	42a1      	cmp	r1, r4
 8004a9c:	d008      	beq.n	8004ab0 <memmove+0x28>
 8004a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aa6:	e7f8      	b.n	8004a9a <memmove+0x12>
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4601      	mov	r1, r0
 8004aac:	428a      	cmp	r2, r1
 8004aae:	d100      	bne.n	8004ab2 <memmove+0x2a>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aba:	e7f7      	b.n	8004aac <memmove+0x24>

08004abc <_sbrk_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d06      	ldr	r5, [pc, #24]	@ (8004ad8 <_sbrk_r+0x1c>)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	f7fb ffc6 	bl	8000a58 <_sbrk>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_sbrk_r+0x1a>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_sbrk_r+0x1a>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	200003b0 	.word	0x200003b0

08004adc <memcpy>:
 8004adc:	440a      	add	r2, r1
 8004ade:	4291      	cmp	r1, r2
 8004ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae4:	d100      	bne.n	8004ae8 <memcpy+0xc>
 8004ae6:	4770      	bx	lr
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af2:	4291      	cmp	r1, r2
 8004af4:	d1f9      	bne.n	8004aea <memcpy+0xe>
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <_realloc_r>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	4607      	mov	r7, r0
 8004afe:	4614      	mov	r4, r2
 8004b00:	460d      	mov	r5, r1
 8004b02:	b921      	cbnz	r1, 8004b0e <_realloc_r+0x16>
 8004b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f7ff bc4d 	b.w	80043a8 <_malloc_r>
 8004b0e:	b92a      	cbnz	r2, 8004b1c <_realloc_r+0x24>
 8004b10:	f7ff fbde 	bl	80042d0 <_free_r>
 8004b14:	4625      	mov	r5, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	f000 f81a 	bl	8004b54 <_malloc_usable_size_r>
 8004b20:	4284      	cmp	r4, r0
 8004b22:	4606      	mov	r6, r0
 8004b24:	d802      	bhi.n	8004b2c <_realloc_r+0x34>
 8004b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b2a:	d8f4      	bhi.n	8004b16 <_realloc_r+0x1e>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f7ff fc3a 	bl	80043a8 <_malloc_r>
 8004b34:	4680      	mov	r8, r0
 8004b36:	b908      	cbnz	r0, 8004b3c <_realloc_r+0x44>
 8004b38:	4645      	mov	r5, r8
 8004b3a:	e7ec      	b.n	8004b16 <_realloc_r+0x1e>
 8004b3c:	42b4      	cmp	r4, r6
 8004b3e:	4622      	mov	r2, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	bf28      	it	cs
 8004b44:	4632      	movcs	r2, r6
 8004b46:	f7ff ffc9 	bl	8004adc <memcpy>
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7ff fbbf 	bl	80042d0 <_free_r>
 8004b52:	e7f1      	b.n	8004b38 <_realloc_r+0x40>

08004b54 <_malloc_usable_size_r>:
 8004b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b58:	1f18      	subs	r0, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bfbc      	itt	lt
 8004b5e:	580b      	ldrlt	r3, [r1, r0]
 8004b60:	18c0      	addlt	r0, r0, r3
 8004b62:	4770      	bx	lr

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
