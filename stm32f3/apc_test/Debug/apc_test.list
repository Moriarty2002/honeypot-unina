
apc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f1c  08003f1c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f24  08003f24  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00004f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000214  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a739  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abf  00000000  00000000  0000f775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00011238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c4  00000000  00000000  000119c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d017  00000000  00000000  00011f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abd3  00000000  00000000  0002ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad727  00000000  00000000  00039b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e7295  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001da8  00000000  00000000  000e72d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  000e9080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ebc 	.word	0x08003ebc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ebc 	.word	0x08003ebc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fb90 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f84e 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f914 	bl	8000410 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f8a6 	bl	8000338 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80001ec:	f000 f8da 	bl	80003a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);			// turn blue led on
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001f6:	481b      	ldr	r0, [pc, #108]	@ (8000264 <main+0x8c>)
 80001f8:	f000 fef0 	bl	8000fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);			// turn blue led on
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000202:	4818      	ldr	r0, [pc, #96]	@ (8000264 <main+0x8c>)
 8000204:	f000 feea 	bl	8000fdc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <main+0x8c>)
 8000210:	f000 fee4 	bl	8000fdc <HAL_GPIO_WritePin>
	  while(flag_on == 1) {
 8000214:	e021      	b.n	800025a <main+0x82>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);			// turn green led on
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800021c:	4811      	ldr	r0, [pc, #68]	@ (8000264 <main+0x8c>)
 800021e:	f000 fedd 	bl	8000fdc <HAL_GPIO_WritePin>

		  if(flag_creds == 1) {
 8000222:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <main+0x90>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d117      	bne.n	800025a <main+0x82>
			  	flag_creds = 0;
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <main+0x90>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
				USART1_TXidx = strlen((char*)USART3_RXBuffer);
 8000230:	480e      	ldr	r0, [pc, #56]	@ (800026c <main+0x94>)
 8000232:	f7ff ffc9 	bl	80001c8 <strlen>
 8000236:	4603      	mov	r3, r0
 8000238:	b29a      	uxth	r2, r3
 800023a:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <main+0x98>)
 800023c:	801a      	strh	r2, [r3, #0]
				memcpy(USART1_TXBuffer, USART3_RXBuffer, USART1_TXidx);				// copy received command in TX buffer
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <main+0x98>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	4909      	ldr	r1, [pc, #36]	@ (800026c <main+0x94>)
 8000246:	480b      	ldr	r0, [pc, #44]	@ (8000274 <main+0x9c>)
 8000248:	f003 fe2a 	bl	8003ea0 <memcpy>
				HAL_UART_Transmit_IT(&huart1, USART1_TXBuffer, USART1_TXidx);		// start transmission on interrupt
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <main+0x98>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	461a      	mov	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	@ (8000274 <main+0x9c>)
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <main+0xa0>)
 8000256:	f002 faf5 	bl	8002844 <HAL_UART_Transmit_IT>
	  while(flag_on == 1) {
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <main+0xa4>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d0d9      	beq.n	8000216 <main+0x3e>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000262:	e7d1      	b.n	8000208 <main+0x30>
 8000264:	48001000 	.word	0x48001000
 8000268:	2000021a 	.word	0x2000021a
 800026c:	200001a8 	.word	0x200001a8
 8000270:	200001a4 	.word	0x200001a4
 8000274:	20000140 	.word	0x20000140
 8000278:	20000028 	.word	0x20000028
 800027c:	20000219 	.word	0x20000219

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09e      	sub	sp, #120	@ 0x78
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fdc7 	bl	8003e22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	223c      	movs	r2, #60	@ 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fdb9 	bl	8003e22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b0:	2301      	movs	r3, #1
 80002b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002d0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fe98 	bl	800100c <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002e2:	f000 f9dd 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fe90 	bl	8002028 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800030e:	f000 f9c7 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000312:	2305      	movs	r3, #5
 8000314:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	4618      	mov	r0, r3
 8000322:	f002 f893 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800032c:	f000 f9b8 	bl	80006a0 <Error_Handler>
  }
}
 8000330:	bf00      	nop
 8000332:	3778      	adds	r7, #120	@ 0x78
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800033c:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 800033e:	4a17      	ldr	r2, [pc, #92]	@ (800039c <MX_USART1_UART_Init+0x64>)
 8000340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000344:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034a:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000356:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 800035e:	220c      	movs	r2, #12
 8000360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000362:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800036e:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800037a:	4807      	ldr	r0, [pc, #28]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 800037c:	f002 fa14 	bl	80027a8 <HAL_UART_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000386:	f000 f98b 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, USART1_RXBuffer, USART1_BUFFER_SIZE);		// enable reception on USART1 (full command)
 800038a:	2206      	movs	r2, #6
 800038c:	4904      	ldr	r1, [pc, #16]	@ (80003a0 <MX_USART1_UART_Init+0x68>)
 800038e:	4802      	ldr	r0, [pc, #8]	@ (8000398 <MX_USART1_UART_Init+0x60>)
 8000390:	f002 fab6 	bl	8002900 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028
 800039c:	40013800 	.word	0x40013800
 80003a0:	20000138 	.word	0x20000138

080003a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003aa:	4a17      	ldr	r2, [pc, #92]	@ (8000408 <MX_USART3_UART_Init+0x64>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003e6:	4807      	ldr	r0, [pc, #28]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003e8:	f002 f9de 	bl	80027a8 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f955 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &USART3_RXByte, 1);							// enable reception on USART3 (1 byte)
 80003f6:	2201      	movs	r2, #1
 80003f8:	4904      	ldr	r1, [pc, #16]	@ (800040c <MX_USART3_UART_Init+0x68>)
 80003fa:	4802      	ldr	r0, [pc, #8]	@ (8000404 <MX_USART3_UART_Init+0x60>)
 80003fc:	f002 fa80 	bl	8002900 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000b0 	.word	0x200000b0
 8000408:	40004800 	.word	0x40004800
 800040c:	2000020c 	.word	0x2000020c

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08a      	sub	sp, #40	@ 0x28
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000426:	4b48      	ldr	r3, [pc, #288]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a47      	ldr	r2, [pc, #284]	@ (8000548 <MX_GPIO_Init+0x138>)
 800042c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b45      	ldr	r3, [pc, #276]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800043a:	613b      	str	r3, [r7, #16]
 800043c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b42      	ldr	r3, [pc, #264]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a41      	ldr	r2, [pc, #260]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000444:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b3f      	ldr	r3, [pc, #252]	@ (8000548 <MX_GPIO_Init+0x138>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b3c      	ldr	r3, [pc, #240]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a3b      	ldr	r2, [pc, #236]	@ (8000548 <MX_GPIO_Init+0x138>)
 800045c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b39      	ldr	r3, [pc, #228]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b36      	ldr	r3, [pc, #216]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a35      	ldr	r2, [pc, #212]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b33      	ldr	r3, [pc, #204]	@ (8000548 <MX_GPIO_Init+0x138>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b30      	ldr	r3, [pc, #192]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a2f      	ldr	r2, [pc, #188]	@ (8000548 <MX_GPIO_Init+0x138>)
 800048c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b2d      	ldr	r3, [pc, #180]	@ (8000548 <MX_GPIO_Init+0x138>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800049e:	2200      	movs	r2, #0
 80004a0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80004a4:	4829      	ldr	r0, [pc, #164]	@ (800054c <MX_GPIO_Init+0x13c>)
 80004a6:	f000 fd99 	bl	8000fdc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004aa:	2337      	movs	r3, #55	@ 0x37
 80004ac:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	4619      	mov	r1, r3
 80004be:	4823      	ldr	r0, [pc, #140]	@ (800054c <MX_GPIO_Init+0x13c>)
 80004c0:	f000 fc12 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004c4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80004c8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	481b      	ldr	r0, [pc, #108]	@ (800054c <MX_GPIO_Init+0x13c>)
 80004de:	f000 fc03 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4619      	mov	r1, r3
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f8:	f000 fbf6 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80004fc:	23e0      	movs	r3, #224	@ 0xe0
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800050c:	2305      	movs	r3, #5
 800050e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051a:	f000 fbe5 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800051e:	23c0      	movs	r3, #192	@ 0xc0
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000522:	2312      	movs	r3, #18
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000526:	2301      	movs	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800052e:	2304      	movs	r3, #4
 8000530:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_GPIO_Init+0x140>)
 800053a:	f000 fbd5 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	@ 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	48001000 	.word	0x48001000
 8000550:	48000400 	.word	0x48000400

08000554 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)		// received command
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a33      	ldr	r2, [pc, #204]	@ (8000630 <HAL_UART_RxCpltCallback+0xdc>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d12b      	bne.n	80005be <HAL_UART_RxCpltCallback+0x6a>
    {
        if (strncmp((char*)USART1_RXBuffer, "start\n", USART1_BUFFER_SIZE) == 0)
 8000566:	2206      	movs	r2, #6
 8000568:	4932      	ldr	r1, [pc, #200]	@ (8000634 <HAL_UART_RxCpltCallback+0xe0>)
 800056a:	4833      	ldr	r0, [pc, #204]	@ (8000638 <HAL_UART_RxCpltCallback+0xe4>)
 800056c:	f003 fc61 	bl	8003e32 <strncmp>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <HAL_UART_RxCpltCallback+0x2a>
        {
        	flag_on = 1;
 8000576:	4b31      	ldr	r3, [pc, #196]	@ (800063c <HAL_UART_RxCpltCallback+0xe8>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e00d      	b.n	800059a <HAL_UART_RxCpltCallback+0x46>
        }
        else if (strncmp((char*)USART1_RXBuffer, "stop_\n", USART1_BUFFER_SIZE) == 0)
 800057e:	2206      	movs	r2, #6
 8000580:	492f      	ldr	r1, [pc, #188]	@ (8000640 <HAL_UART_RxCpltCallback+0xec>)
 8000582:	482d      	ldr	r0, [pc, #180]	@ (8000638 <HAL_UART_RxCpltCallback+0xe4>)
 8000584:	f003 fc55 	bl	8003e32 <strncmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d105      	bne.n	800059a <HAL_UART_RxCpltCallback+0x46>
        {
        	flag_on = 0;
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_UART_RxCpltCallback+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
        	flag_creds = 0;
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <HAL_UART_RxCpltCallback+0xf0>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
        }

    	memcpy(USART3_TXBuffer, USART1_RXBuffer, USART1_BUFFER_SIZE);						// copy received command in TX buffer
 800059a:	4b2b      	ldr	r3, [pc, #172]	@ (8000648 <HAL_UART_RxCpltCallback+0xf4>)
 800059c:	4a26      	ldr	r2, [pc, #152]	@ (8000638 <HAL_UART_RxCpltCallback+0xe4>)
 800059e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a2:	6018      	str	r0, [r3, #0]
 80005a4:	3304      	adds	r3, #4
 80005a6:	8019      	strh	r1, [r3, #0]
    	HAL_UART_Transmit_IT(&huart3, USART3_TXBuffer, USART1_BUFFER_SIZE);					// start transmission on interrupt
 80005a8:	2206      	movs	r2, #6
 80005aa:	4927      	ldr	r1, [pc, #156]	@ (8000648 <HAL_UART_RxCpltCallback+0xf4>)
 80005ac:	4827      	ldr	r0, [pc, #156]	@ (800064c <HAL_UART_RxCpltCallback+0xf8>)
 80005ae:	f002 f949 	bl	8002844 <HAL_UART_Transmit_IT>
        HAL_UART_Receive_IT(&huart1, USART1_RXBuffer, USART1_BUFFER_SIZE);					// reset reception
 80005b2:	2206      	movs	r2, #6
 80005b4:	4920      	ldr	r1, [pc, #128]	@ (8000638 <HAL_UART_RxCpltCallback+0xe4>)
 80005b6:	4826      	ldr	r0, [pc, #152]	@ (8000650 <HAL_UART_RxCpltCallback+0xfc>)
 80005b8:	f002 f9a2 	bl	8002900 <HAL_UART_Receive_IT>
            }
        }

        HAL_UART_Receive_IT(&huart3, &USART3_RXByte, 1);						// reset reception
    }
}
 80005bc:	e034      	b.n	8000628 <HAL_UART_RxCpltCallback+0xd4>
    else if (huart->Instance == USART3)		// received a credentials char
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a24      	ldr	r2, [pc, #144]	@ (8000654 <HAL_UART_RxCpltCallback+0x100>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d12f      	bne.n	8000628 <HAL_UART_RxCpltCallback+0xd4>
        if (USART3_RXByte == '\n' || USART3_RXBufferFull == 1)
 80005c8:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <HAL_UART_RxCpltCallback+0x104>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d004      	beq.n	80005da <HAL_UART_RxCpltCallback+0x86>
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <HAL_UART_RxCpltCallback+0x108>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10f      	bne.n	80005fa <HAL_UART_RxCpltCallback+0xa6>
        	USART3_RXBuffer[USART3_RXidx] = '\0';
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <HAL_UART_RxCpltCallback+0x10c>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <HAL_UART_RxCpltCallback+0x110>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	5499      	strb	r1, [r3, r2]
        	flag_creds = 1;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_UART_RxCpltCallback+0xf0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
        	USART3_RXidx = 0;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <HAL_UART_RxCpltCallback+0x10c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	801a      	strh	r2, [r3, #0]
        	USART3_RXBufferFull = 0;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <HAL_UART_RxCpltCallback+0x108>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e011      	b.n	800061e <HAL_UART_RxCpltCallback+0xca>
        	USART3_RXBuffer[USART3_RXidx++] = USART3_RXByte;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <HAL_UART_RxCpltCallback+0x10c>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	b291      	uxth	r1, r2
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <HAL_UART_RxCpltCallback+0x10c>)
 8000604:	8011      	strh	r1, [r2, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <HAL_UART_RxCpltCallback+0x104>)
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_UART_RxCpltCallback+0x110>)
 800060e:	5499      	strb	r1, [r3, r2]
            if (USART3_RXidx >= USART3_BUFFER_SIZE)
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <HAL_UART_RxCpltCallback+0x10c>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b63      	cmp	r3, #99	@ 0x63
 8000616:	d902      	bls.n	800061e <HAL_UART_RxCpltCallback+0xca>
            	USART3_RXBufferFull = 1;
 8000618:	4b10      	ldr	r3, [pc, #64]	@ (800065c <HAL_UART_RxCpltCallback+0x108>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &USART3_RXByte, 1);						// reset reception
 800061e:	2201      	movs	r2, #1
 8000620:	490d      	ldr	r1, [pc, #52]	@ (8000658 <HAL_UART_RxCpltCallback+0x104>)
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <HAL_UART_RxCpltCallback+0xf8>)
 8000624:	f002 f96c 	bl	8002900 <HAL_UART_Receive_IT>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40013800 	.word	0x40013800
 8000634:	08003ed4 	.word	0x08003ed4
 8000638:	20000138 	.word	0x20000138
 800063c:	20000219 	.word	0x20000219
 8000640:	08003edc 	.word	0x08003edc
 8000644:	2000021a 	.word	0x2000021a
 8000648:	20000210 	.word	0x20000210
 800064c:	200000b0 	.word	0x200000b0
 8000650:	20000028 	.word	0x20000028
 8000654:	40004800 	.word	0x40004800
 8000658:	2000020c 	.word	0x2000020c
 800065c:	20000218 	.word	0x20000218
 8000660:	20000216 	.word	0x20000216
 8000664:	200001a8 	.word	0x200001a8

08000668 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_UART_TxCpltCallback+0x2c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d108      	bne.n	800068c <HAL_UART_TxCpltCallback+0x24>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);			// orange led when transmission is finished (for debug)
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <HAL_UART_TxCpltCallback+0x30>)
 8000682:	f000 fcab 	bl	8000fdc <HAL_GPIO_WritePin>
		USART1_TXidx = 0;
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_UART_TxCpltCallback+0x34>)
 8000688:	2200      	movs	r2, #0
 800068a:	801a      	strh	r2, [r3, #0]
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40013800 	.word	0x40013800
 8000698:	48001000 	.word	0x48001000
 800069c:	200001a4 	.word	0x200001a4

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x44>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x44>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006e2:	2007      	movs	r0, #7
 80006e4:	f000 fa42 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <HAL_UART_MspInit+0xf8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d130      	bne.n	8000778 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000716:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a35      	ldr	r2, [pc, #212]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a2f      	ldr	r2, [pc, #188]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000746:	2330      	movs	r3, #48	@ 0x30
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000756:	2307      	movs	r3, #7
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4824      	ldr	r0, [pc, #144]	@ (80007f4 <HAL_UART_MspInit+0x100>)
 8000762:	f000 fac1 	bl	8000ce8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2025      	movs	r0, #37	@ 0x25
 800076c:	f000 fa09 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000770:	2025      	movs	r0, #37	@ 0x25
 8000772:	f000 fa22 	bl	8000bba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000776:	e035      	b.n	80007e4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <HAL_UART_MspInit+0x104>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d130      	bne.n	80007e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a1a      	ldr	r2, [pc, #104]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_UART_MspInit+0xfc>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007c4:	2307      	movs	r3, #7
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <HAL_UART_MspInit+0x108>)
 80007d0:	f000 fa8a 	bl	8000ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2027      	movs	r0, #39	@ 0x27
 80007da:	f000 f9d2 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007de:	2027      	movs	r0, #39	@ 0x27
 80007e0:	f000 f9eb 	bl	8000bba <HAL_NVIC_EnableIRQ>
}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	@ 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000800 	.word	0x48000800
 80007f8:	40004800 	.word	0x40004800
 80007fc:	48000400 	.word	0x48000400

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f899 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <USART1_IRQHandler+0x10>)
 8000866:	f002 f88f 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000028 	.word	0x20000028

08000874 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <USART3_IRQHandler+0x10>)
 800087a:	f002 f885 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000b0 	.word	0x200000b0

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b0:	f7ff ffea 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f003 fabd 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fc7b 	bl	80001d8 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f0:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 80008f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f8:	20000220 	.word	0x20000220

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f92b 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fec6 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f943 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f90b 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	2000021c 	.word	0x2000021c

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000021c 	.word	0x2000021c

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	@ (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	@ (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	@ 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff29 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff3e 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff31 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e02e      	b.n	8000c5e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d008      	beq.n	8000c1c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e020      	b.n	8000c5e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 020e 	bic.w	r2, r2, #14
 8000c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0201 	bic.w	r2, r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c44:	2101      	movs	r1, #1
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d005      	beq.n	8000c8c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2204      	movs	r2, #4
 8000c84:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e027      	b.n	8000cdc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 020e 	bic.w	r2, r2, #14
 8000c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	4798      	blx	r3
    }
  }
  return status;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	e154      	b.n	8000fa2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8146 	beq.w	8000f9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x40>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d017      	beq.n	8000dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d123      	bne.n	8000e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	6939      	ldr	r1, [r7, #16]
 8000e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0203 	and.w	r2, r3, #3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80a0 	beq.w	8000f9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a57      	ldr	r2, [pc, #348]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e74:	4a53      	ldr	r2, [pc, #332]	@ (8000fc4 <HAL_GPIO_Init+0x2dc>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e9e:	d019      	beq.n	8000ed4 <HAL_GPIO_Init+0x1ec>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <HAL_GPIO_Init+0x2e0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a48      	ldr	r2, [pc, #288]	@ (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1e4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a47      	ldr	r2, [pc, #284]	@ (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a46      	ldr	r2, [pc, #280]	@ (8000fd4 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1dc>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e008      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	4093      	lsls	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee6:	4937      	ldr	r1, [pc, #220]	@ (8000fc4 <HAL_GPIO_Init+0x2dc>)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef4:	4b38      	ldr	r3, [pc, #224]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f18:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f42:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f aea3 	bne.w	8000cf8 <HAL_GPIO_Init+0x10>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001012:	af00      	add	r7, sp, #0
 8001014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001018:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800101c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	f000 bff4 	b.w	800201a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 816d 	beq.w	8001322 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001048:	4bb4      	ldr	r3, [pc, #720]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b04      	cmp	r3, #4
 8001052:	d00c      	beq.n	800106e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001054:	4bb1      	ldr	r3, [pc, #708]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d157      	bne.n	8001110 <HAL_RCC_OscConfig+0x104>
 8001060:	4bae      	ldr	r3, [pc, #696]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800106c:	d150      	bne.n	8001110 <HAL_RCC_OscConfig+0x104>
 800106e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001072:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001082:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b3f      	cmp	r3, #63	@ 0x3f
 800108e:	d802      	bhi.n	8001096 <HAL_RCC_OscConfig+0x8a>
 8001090:	4ba2      	ldr	r3, [pc, #648]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0xb6>
 8001096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80010aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80010b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80010be:	4b97      	ldr	r3, [pc, #604]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80010ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80010ce:	fa92 f2a2 	rbit	r2, r2
 80010d2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80010d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f002 021f 	and.w	r2, r2, #31
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8114 	beq.w	8001320 <HAL_RCC_OscConfig+0x314>
 80010f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f040 810b 	bne.w	8001320 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 bf85 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x124>
 8001122:	4b7e      	ldr	r3, [pc, #504]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7d      	ldr	r2, [pc, #500]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e036      	b.n	800119e <HAL_RCC_OscConfig+0x192>
 8001130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x14e>
 8001140:	4b76      	ldr	r3, [pc, #472]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a75      	ldr	r2, [pc, #468]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b73      	ldr	r3, [pc, #460]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a72      	ldr	r2, [pc, #456]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e021      	b.n	800119e <HAL_RCC_OscConfig+0x192>
 800115a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x17a>
 800116c:	4b6b      	ldr	r3, [pc, #428]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001172:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0x192>
 8001186:	4b65      	ldr	r3, [pc, #404]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a64      	ldr	r2, [pc, #400]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b62      	ldr	r3, [pc, #392]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a61      	ldr	r2, [pc, #388]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119e:	4b5f      	ldr	r3, [pc, #380]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a2:	f023 020f 	bic.w	r2, r3, #15
 80011a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	495a      	ldr	r1, [pc, #360]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d054      	beq.n	8001272 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbf4 	bl	80009b4 <HAL_GetTick>
 80011cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fbef 	bl	80009b4 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d902      	bls.n	80011e8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f000 bf19 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 80011e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80011fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b3f      	cmp	r3, #63	@ 0x3f
 8001208:	d802      	bhi.n	8001210 <HAL_RCC_OscConfig+0x204>
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x230>
 8001210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001214:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001224:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001228:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800122c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001238:	4b38      	ldr	r3, [pc, #224]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001240:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001244:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001250:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0b0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1c6>
 8001270:	e057      	b.n	8001322 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb9f 	bl	80009b4 <HAL_GetTick>
 8001276:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e00a      	b.n	8001292 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fb9a 	bl	80009b4 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	@ 0x64
 800128a:	d902      	bls.n	8001292 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	f000 bec4 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 8001292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001296:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80012a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b2:	d802      	bhi.n	80012ba <HAL_RCC_OscConfig+0x2ae>
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x2da>
 80012ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80012ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80012d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_RCC_OscConfig+0x310>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80012ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80012fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1b0      	bne.n	800127c <HAL_RCC_OscConfig+0x270>
 800131a:	e002      	b.n	8001322 <HAL_RCC_OscConfig+0x316>
 800131c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001326:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 816c 	beq.w	8001610 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001338:	4bcc      	ldr	r3, [pc, #816]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001344:	4bc9      	ldr	r3, [pc, #804]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d16d      	bne.n	800142c <HAL_RCC_OscConfig+0x420>
 8001350:	4bc6      	ldr	r3, [pc, #792]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d167      	bne.n	800142c <HAL_RCC_OscConfig+0x420>
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800136e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b3f      	cmp	r3, #63	@ 0x3f
 800137a:	d802      	bhi.n	8001382 <HAL_RCC_OscConfig+0x376>
 800137c:	4bbb      	ldr	r3, [pc, #748]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e013      	b.n	80013aa <HAL_RCC_OscConfig+0x39e>
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800139a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80013a6:	4bb1      	ldr	r3, [pc, #708]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	2202      	movs	r2, #2
 80013ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80013b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80013b4:	fa92 f2a2 	rbit	r2, r2
 80013b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80013bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80013c0:	fab2 f282 	clz	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f002 021f 	and.w	r2, r2, #31
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00a      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3e6>
 80013dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d002      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f000 be14 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b9e      	ldr	r3, [pc, #632]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	21f8      	movs	r1, #248	@ 0xf8
 8001408:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001410:	fa91 f1a1 	rbit	r1, r1
 8001414:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001418:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800141c:	fab1 f181 	clz	r1, r1
 8001420:	b2c9      	uxtb	r1, r1
 8001422:	408b      	lsls	r3, r1
 8001424:	4991      	ldr	r1, [pc, #580]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e0f1      	b.n	8001610 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8083 	beq.w	8001544 <HAL_RCC_OscConfig+0x538>
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001450:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800145e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff faa3 	bl	80009b4 <HAL_GetTick>
 800146e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fa9e 	bl	80009b4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d902      	bls.n	800148a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	f000 bdc8 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800149c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80014a8:	d802      	bhi.n	80014b0 <HAL_RCC_OscConfig+0x4a4>
 80014aa:	4b70      	ldr	r3, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x4cc>
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80014c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80014d4:	4b65      	ldr	r3, [pc, #404]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80014de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80014ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0b4      	beq.n	8001474 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001516:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	21f8      	movs	r1, #248	@ 0xf8
 8001520:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001528:	fa91 f1a1 	rbit	r1, r1
 800152c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001530:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001534:	fab1 f181 	clz	r1, r1
 8001538:	b2c9      	uxtb	r1, r1
 800153a:	408b      	lsls	r3, r1
 800153c:	494b      	ldr	r1, [pc, #300]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
 8001542:	e065      	b.n	8001610 <HAL_RCC_OscConfig+0x604>
 8001544:	2301      	movs	r3, #1
 8001546:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001556:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001564:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	461a      	mov	r2, r3
 800156c:	2300      	movs	r3, #0
 800156e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fa20 	bl	80009b4 <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fa1b 	bl	80009b4 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d902      	bls.n	8001590 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	f000 bd45 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80015a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80015ae:	d802      	bhi.n	80015b6 <HAL_RCC_OscConfig+0x5aa>
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e013      	b.n	80015de <HAL_RCC_OscConfig+0x5d2>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_RCC_OscConfig+0x660>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	2202      	movs	r2, #2
 80015e0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80015e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80015f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1b4      	bne.n	800157a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8115 	beq.w	8001850 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d07e      	beq.n	8001734 <HAL_RCC_OscConfig+0x728>
 8001636:	2301      	movs	r3, #1
 8001638:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_RCC_OscConfig+0x664>)
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff f9a8 	bl	80009b4 <HAL_GetTick>
 8001664:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001668:	e00f      	b.n	800168a <HAL_RCC_OscConfig+0x67e>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff f99e 	bl	80009b4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bcc8 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800169c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016a4:	2202      	movs	r2, #2
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	4bb0      	ldr	r3, [pc, #704]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 80016e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016f0:	2102      	movs	r1, #2
 80016f2:	6019      	str	r1, [r3, #0]
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f1a3 	rbit	r1, r3
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800170a:	6019      	str	r1, [r3, #0]
  return result;
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0a0      	beq.n	8001674 <HAL_RCC_OscConfig+0x668>
 8001732:	e08d      	b.n	8001850 <HAL_RCC_OscConfig+0x844>
 8001734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001738:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f2a3 	rbit	r2, r3
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001756:	601a      	str	r2, [r3, #0]
  return result;
 8001758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001760:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b90      	ldr	r3, [pc, #576]	@ (80019ac <HAL_RCC_OscConfig+0x9a0>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	2300      	movs	r3, #0
 8001774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f91d 	bl	80009b4 <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f918 	bl	80009b4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d902      	bls.n	8001796 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	f000 bc42 	b.w	800201a <HAL_RCC_OscConfig+0x100e>
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001800:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001802:	4b69      	ldr	r3, [pc, #420]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800180e:	2102      	movs	r1, #2
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001816:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f1a3 	rbit	r1, r3
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001828:	6019      	str	r1, [r3, #0]
  return result;
 800182a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d197      	bne.n	8001780 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 819e 	beq.w	8001ba2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186c:	4b4e      	ldr	r3, [pc, #312]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4b4b      	ldr	r3, [pc, #300]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a4a      	ldr	r2, [pc, #296]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001882:	61d3      	str	r3, [r2, #28]
 8001884:	4b48      	ldr	r3, [pc, #288]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800189e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <HAL_RCC_OscConfig+0x9a4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_RCC_OscConfig+0x9a4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a3e      	ldr	r2, [pc, #248]	@ (80019b0 <HAL_RCC_OscConfig+0x9a4>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff f879 	bl	80009b4 <HAL_GetTick>
 80018c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	e009      	b.n	80018dc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7ff f874 	bl	80009b4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	@ 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e39e      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <HAL_RCC_OscConfig+0x9a4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ef      	beq.n	80018c8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x8fa>
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e035      	b.n	8001972 <HAL_RCC_OscConfig+0x966>
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x924>
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	e020      	b.n	8001972 <HAL_RCC_OscConfig+0x966>
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d10c      	bne.n	800195a <HAL_RCC_OscConfig+0x94e>
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	e00b      	b.n	8001972 <HAL_RCC_OscConfig+0x966>
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <HAL_RCC_OscConfig+0x99c>)
 800196c:	f023 0304 	bic.w	r3, r3, #4
 8001970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f816 	bl	80009b4 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e012      	b.n	80019b4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f811 	bl	80009b4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e339      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	10908120 	.word	0x10908120
 80019b0:	40007000 	.word	0x40007000
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019fa:	601a      	str	r2, [r3, #0]
  return result;
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0xa10>
 8001a16:	4b98      	ldr	r3, [pc, #608]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	e013      	b.n	8001a44 <HAL_RCC_OscConfig+0xa38>
 8001a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b8d      	ldr	r3, [pc, #564]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	6011      	str	r1, [r2, #0]
 8001a50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a54:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	fa92 f1a2 	rbit	r1, r2
 8001a5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a66:	6011      	str	r1, [r2, #0]
  return result;
 8001a68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f002 021f 	and.w	r2, r2, #31
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f43f af7f 	beq.w	800198e <HAL_RCC_OscConfig+0x982>
 8001a90:	e07d      	b.n	8001b8e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7fe ff8f 	bl	80009b4 <HAL_GetTick>
 8001a96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7fe ff8a 	bl	80009b4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e2b2      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_OscConfig+0xb10>
 8001b16:	4b58      	ldr	r3, [pc, #352]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	e013      	b.n	8001b44 <HAL_RCC_OscConfig+0xb38>
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b48:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	6011      	str	r1, [r2, #0]
 8001b50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b54:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	fa92 f1a2 	rbit	r1, r2
 8001b5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b62:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b66:	6011      	str	r1, [r2, #0]
  return result;
 8001b68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f002 021f 	and.w	r2, r2, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d186      	bne.n	8001a9c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b8e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8232 	beq.w	8002018 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb4:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	f000 8201 	beq.w	8001fc4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	f040 8157 	bne.w	8001e82 <HAL_RCC_OscConfig+0xe76>
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001bdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bf8:	601a      	str	r2, [r3, #0]
  return result;
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c02:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	461a      	mov	r2, r3
 8001c16:	2300      	movs	r3, #0
 8001c18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fecb 	bl	80009b4 <HAL_GetTick>
 8001c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	e009      	b.n	8001c38 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7fe fec6 	bl	80009b4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1f0      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c5c:	601a      	str	r2, [r3, #0]
  return result;
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c70:	d804      	bhi.n	8001c7c <HAL_RCC_OscConfig+0xc70>
 8001c72:	4b01      	ldr	r3, [pc, #4]	@ (8001c78 <HAL_RCC_OscConfig+0xc6c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e029      	b.n	8001ccc <HAL_RCC_OscConfig+0xcc0>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001caa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4bc3      	ldr	r3, [pc, #780]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cd0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001cd4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cd8:	6011      	str	r1, [r2, #0]
 8001cda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cde:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fa92 f1a2 	rbit	r1, r2
 8001ce8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cf0:	6011      	str	r1, [r2, #0]
  return result;
 8001cf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d185      	bne.n	8001c24 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4baf      	ldr	r3, [pc, #700]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	49a7      	ldr	r1, [pc, #668]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
 8001d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d64:	601a      	str	r2, [r3, #0]
  return result;
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d6e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	461a      	mov	r2, r3
 8001d82:	2301      	movs	r3, #1
 8001d84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fe15 	bl	80009b4 <HAL_GetTick>
 8001d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7fe fe10 	bl	80009b4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e13a      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f2a3 	rbit	r2, r3
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dc8:	601a      	str	r2, [r3, #0]
  return result;
 8001dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ddc:	d802      	bhi.n	8001de4 <HAL_RCC_OscConfig+0xdd8>
 8001dde:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e027      	b.n	8001e34 <HAL_RCC_OscConfig+0xe28>
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b69      	ldr	r3, [pc, #420]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e38:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e40:	6011      	str	r1, [r2, #0]
 8001e42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e46:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	fa92 f1a2 	rbit	r1, r2
 8001e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e54:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e58:	6011      	str	r1, [r2, #0]
  return result;
 8001e5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e5e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d087      	beq.n	8001d90 <HAL_RCC_OscConfig+0xd84>
 8001e80:	e0ca      	b.n	8002018 <HAL_RCC_OscConfig+0x100c>
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ea6:	601a      	str	r2, [r3, #0]
  return result;
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001eb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ebc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fd74 	bl	80009b4 <HAL_GetTick>
 8001ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fd6f 	bl	80009b4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e099      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001eee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f0a:	601a      	str	r2, [r3, #0]
  return result;
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f1e:	d802      	bhi.n	8001f26 <HAL_RCC_OscConfig+0xf1a>
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	e027      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6a>
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_OscConfig+0xfcc>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f7a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f7e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f82:	6011      	str	r1, [r2, #0]
 8001f84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f88:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	fa92 f1a2 	rbit	r1, r2
 8001f92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f96:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f9a:	6011      	str	r1, [r2, #0]
  return result;
 8001f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d187      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xec6>
 8001fc2:	e029      	b.n	8002018 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d103      	bne.n	8001fdc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e020      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
 8001fd8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_RCC_OscConfig+0x1018>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fe4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001fe8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002000:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09e      	sub	sp, #120	@ 0x78
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e154      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b89      	ldr	r3, [pc, #548]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b86      	ldr	r3, [pc, #536]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4984      	ldr	r1, [pc, #528]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b82      	ldr	r3, [pc, #520]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e13c      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b7b      	ldr	r3, [pc, #492]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4978      	ldr	r1, [pc, #480]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80cd 	beq.w	8002236 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d137      	bne.n	8002114 <HAL_RCC_ClockConfig+0xec>
 80020a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80020bc:	d802      	bhi.n	80020c4 <HAL_RCC_ClockConfig+0x9c>
 80020be:	4b6b      	ldr	r3, [pc, #428]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e00f      	b.n	80020e4 <HAL_RCC_ClockConfig+0xbc>
 80020c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80020d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020e0:	4b62      	ldr	r3, [pc, #392]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80020f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d171      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0ea      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d137      	bne.n	800218c <HAL_RCC_ClockConfig+0x164>
 800211c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002120:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800212a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b3f      	cmp	r3, #63	@ 0x3f
 8002134:	d802      	bhi.n	800213c <HAL_RCC_ClockConfig+0x114>
 8002136:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	e00f      	b.n	800215c <HAL_RCC_ClockConfig+0x134>
 800213c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	647b      	str	r3, [r7, #68]	@ 0x44
 800214a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800214e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002158:	4b44      	ldr	r3, [pc, #272]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002160:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800216a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f002 021f 	and.w	r2, r2, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d135      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ae      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
 800218c:	2302      	movs	r3, #2
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a2:	d802      	bhi.n	80021aa <HAL_RCC_ClockConfig+0x182>
 80021a4:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e00d      	b.n	80021c6 <HAL_RCC_ClockConfig+0x19e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2202      	movs	r2, #2
 80021c8:	61ba      	str	r2, [r7, #24]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	617a      	str	r2, [r7, #20]
  return result;
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e07a      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	491a      	ldr	r1, [pc, #104]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002206:	f7fe fbd5 	bl	80009b4 <HAL_GetTick>
 800220a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	e00a      	b.n	8002224 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220e:	f7fe fbd1 	bl	80009b4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e062      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_ClockConfig+0x244>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 020c 	and.w	r2, r3, #12
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	429a      	cmp	r2, r3
 8002234:	d1eb      	bne.n	800220e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d215      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 0207 	bic.w	r2, r3, #7
 800224c:	4906      	ldr	r1, [pc, #24]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d006      	beq.n	8002270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e041      	b.n	80022ea <HAL_RCC_ClockConfig+0x2c2>
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_RCC_ClockConfig+0x2cc>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	491a      	ldr	r1, [pc, #104]	@ (80022f4 <HAL_RCC_ClockConfig+0x2cc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <HAL_RCC_ClockConfig+0x2cc>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4912      	ldr	r1, [pc, #72]	@ (80022f4 <HAL_RCC_ClockConfig+0x2cc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ae:	f000 f829 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_RCC_ClockConfig+0x2cc>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022bc:	22f0      	movs	r2, #240	@ 0xf0
 80022be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	60fa      	str	r2, [r7, #12]
  return result;
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	40d3      	lsrs	r3, r2
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x2d0>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a08      	ldr	r2, [pc, #32]	@ (80022fc <HAL_RCC_ClockConfig+0x2d4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <HAL_RCC_ClockConfig+0x2d8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fb22 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3778      	adds	r7, #120	@ 0x78
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003ee4 	.word	0x08003ee4
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x94>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x30>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x36>
 8002332:	e026      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002336:	613b      	str	r3, [r7, #16]
      break;
 8002338:	e026      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0c9b      	lsrs	r3, r3, #18
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x94>)
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002360:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	fbb2 f2f3 	udiv	r2, r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e004      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e002      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_RCC_GetSysClockFreq+0x98>)
 8002384:	613b      	str	r3, [r7, #16]
      break;
 8002386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002388:	693b      	ldr	r3, [r7, #16]
}
 800238a:	4618      	mov	r0, r3
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	007a1200 	.word	0x007a1200
 80023a0:	08003efc 	.word	0x08003efc
 80023a4:	08003f0c 	.word	0x08003f0c
 80023a8:	003d0900 	.word	0x003d0900

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ca:	f7ff ffef 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023ce:	4601      	mov	r1, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	603a      	str	r2, [r7, #0]
  return result;
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	40d3      	lsrs	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	@ (8002404 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	08003ef4 	.word	0x08003ef4

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800240e:	f7ff ffcd 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800241c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002420:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	603a      	str	r2, [r7, #0]
  return result;
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	40d3      	lsrs	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	08003ef4 	.word	0x08003ef4

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b092      	sub	sp, #72	@ 0x48
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80d2 	beq.w	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10e      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a49      	ldr	r2, [pc, #292]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002486:	61d3      	str	r3, [r2, #28]
 8002488:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b44      	ldr	r3, [pc, #272]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fa7f 	bl	80009b4 <HAL_GetTick>
 80024b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e008      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ba:	f7fe fa7b 	bl	80009b4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	@ 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e167      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024d8:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8082 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d07a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024f8:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002502:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	2300      	movs	r3, #0
 8002548:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800254a:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800254c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d049      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fa2b 	bl	80009b4 <HAL_GetTick>
 800255e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fa27 	bl	80009b4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e111      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002578:	2302      	movs	r3, #2
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	61fb      	str	r3, [r7, #28]
  return result;
 8002590:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80025a2:	4b01      	ldr	r3, [pc, #4]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	e00d      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	10908100 	.word	0x10908100
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	4b78      	ldr	r3, [pc, #480]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	2202      	movs	r2, #2
 80025c6:	613a      	str	r2, [r7, #16]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	60fa      	str	r2, [r7, #12]
  return result;
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0b9      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025ee:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	496a      	ldr	r1, [pc, #424]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a65      	ldr	r2, [pc, #404]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800260e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002620:	4b60      	ldr	r3, [pc, #384]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	f023 0203 	bic.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	495d      	ldr	r1, [pc, #372]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800262e:	4313      	orrs	r3, r2
 8002630:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800263e:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4956      	ldr	r1, [pc, #344]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800264c:	4313      	orrs	r3, r2
 800264e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265c:	4b51      	ldr	r3, [pc, #324]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	494e      	ldr	r1, [pc, #312]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800266a:	4313      	orrs	r3, r2
 800266c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f023 0210 	bic.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4947      	ldr	r1, [pc, #284]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002698:	4b42      	ldr	r3, [pc, #264]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026b6:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f023 0220 	bic.w	r2, r3, #32
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4938      	ldr	r1, [pc, #224]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d4:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4930      	ldr	r1, [pc, #192]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	4929      	ldr	r1, [pc, #164]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002700:	4313      	orrs	r3, r2
 8002702:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	4921      	ldr	r1, [pc, #132]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800272e:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	491a      	ldr	r1, [pc, #104]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800273c:	4313      	orrs	r3, r2
 800273e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800274c:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	4912      	ldr	r1, [pc, #72]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800275a:	4313      	orrs	r3, r2
 800275c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	490b      	ldr	r1, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002778:	4313      	orrs	r3, r2
 800277a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002796:	4313      	orrs	r3, r2
 8002798:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3748      	adds	r7, #72	@ 0x48
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e040      	b.n	800283c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fd ff92 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	@ 0x24
 80027d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fd9a 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fbc3 	bl	8002f80 <UART_SetConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e01b      	b.n	800283c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fe19 	bl	800346c <UART_CheckIdleState>
 800283a:	4603      	mov	r3, r0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002844:	b480      	push	{r7}
 8002846:	b08b      	sub	sp, #44	@ 0x2c
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002856:	2b20      	cmp	r3, #32
 8002858:	d147      	bne.n	80028ea <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_UART_Transmit_IT+0x22>
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e040      	b.n	80028ec <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2221      	movs	r2, #33	@ 0x21
 8002892:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289c:	d107      	bne.n	80028ae <HAL_UART_Transmit_IT+0x6a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <HAL_UART_Transmit_IT+0xb4>)
 80028aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80028ac:	e002      	b.n	80028b4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <HAL_UART_Transmit_IT+0xb8>)
 80028b2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	613b      	str	r3, [r7, #16]
   return(result);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	69f9      	ldr	r1, [r7, #28]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e6      	bne.n	80028b4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	372c      	adds	r7, #44	@ 0x2c
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	080039ab 	.word	0x080039ab
 80028fc:	080038f5 	.word	0x080038f5

08002900 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002914:	2b20      	cmp	r3, #32
 8002916:	d132      	bne.n	800297e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Receive_IT+0x24>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e02b      	b.n	8002980 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d018      	beq.n	800296e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	613b      	str	r3, [r7, #16]
   return(result);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	69f9      	ldr	r1, [r7, #28]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	61bb      	str	r3, [r7, #24]
   return(result);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e6      	bne.n	800293c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	461a      	mov	r2, r3
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fe8f 	bl	8003698 <UART_Start_Receive_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	e000      	b.n	8002980 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	@ 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b0ba      	sub	sp, #232	@ 0xe8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029b6:	4013      	ands	r3, r2
 80029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d115      	bne.n	80029f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 82ab 	beq.w	8002f3c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
      }
      return;
 80029ee:	e2a5      	b.n	8002f3c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8117 	beq.w	8002c28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a0a:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <HAL_UART_IRQHandler+0x298>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 810a 	beq.w	8002c28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0xbc>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_UART_IRQHandler+0xec>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d011      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x11c>
 8002a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2208      	movs	r2, #8
 8002ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad6:	f043 0208 	orr.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <HAL_UART_IRQHandler+0x18a>
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8211 	beq.w	8002f40 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b40      	cmp	r3, #64	@ 0x40
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04f      	beq.n	8002c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fe48 	bl	8003800 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d141      	bne.n	8002c02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3308      	adds	r3, #8
 8002b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1d9      	bne.n	8002b7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd6:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <HAL_UART_IRQHandler+0x29c>)
 8002bd8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f843 	bl	8000c6a <HAL_DMA_Abort_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d017      	beq.n	8002c1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e00f      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9aa 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e00b      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9a6 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e007      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9a2 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002c18:	e192      	b.n	8002f40 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	bf00      	nop
    return;
 8002c1c:	e190      	b.n	8002f40 <HAL_UART_IRQHandler+0x5b8>
 8002c1e:	bf00      	nop
 8002c20:	04000120 	.word	0x04000120
 8002c24:	080038c9 	.word	0x080038c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 814b 	bne.w	8002ec8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8144 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 813d 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2210      	movs	r2, #16
 8002c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b40      	cmp	r3, #64	@ 0x40
 8002c62:	f040 80b5 	bne.w	8002dd0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8164 	beq.w	8002f44 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c86:	429a      	cmp	r2, r3
 8002c88:	f080 815c 	bcs.w	8002f44 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	f000 8086 	beq.w	8002dae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cae:	e853 3f00 	ldrex	r3, [r3]
 8002cb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ccc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cd0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1da      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d10:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e1      	bne.n	8002cec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3308      	adds	r3, #8
 8002d48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e3      	bne.n	8002d28 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e4      	bne.n	8002d6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd ff20 	bl	8000bee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8cd 	bl	8002f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dce:	e0b9      	b.n	8002f44 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80ab 	beq.w	8002f48 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e4      	bne.n	8002dfc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3308      	adds	r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	623b      	str	r3, [r7, #32]
   return(result);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e3      	bne.n	8002e32 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	e853 3f00 	ldrex	r3, [r3]
 8002e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0310 	bic.w	r3, r3, #16
 8002e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	69b9      	ldr	r1, [r7, #24]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	617b      	str	r3, [r7, #20]
   return(result);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e4      	bne.n	8002e7e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f851 	bl	8002f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ec6:	e03f      	b.n	8002f48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x56a>
 8002ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 ff8f 	bl	8003e0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ef0:	e02d      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    }
    return;
 8002f1a:	e017      	b.n	8002f4c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d012      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fd98 	bl	8003a6a <UART_EndTransmit_IT>
    return;
 8002f3a:	e008      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f3c:	bf00      	nop
 8002f3e:	e006      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f40:	bf00      	nop
 8002f42:	e004      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f4c:	bf00      	nop
  }

}
 8002f4e:	37e8      	adds	r7, #232	@ 0xe8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002fae:	f023 030c 	bic.w	r3, r3, #12
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4aa7      	ldr	r2, [pc, #668]	@ (8003298 <UART_SetConfig+0x318>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d120      	bne.n	8003042 <UART_SetConfig+0xc2>
 8003000:	4ba6      	ldr	r3, [pc, #664]	@ (800329c <UART_SetConfig+0x31c>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d817      	bhi.n	800303c <UART_SetConfig+0xbc>
 800300c:	a201      	add	r2, pc, #4	@ (adr r2, 8003014 <UART_SetConfig+0x94>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	08003031 	.word	0x08003031
 800301c:	08003037 	.word	0x08003037
 8003020:	0800302b 	.word	0x0800302b
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e0b5      	b.n	8003196 <UART_SetConfig+0x216>
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e0b2      	b.n	8003196 <UART_SetConfig+0x216>
 8003030:	2304      	movs	r3, #4
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e0af      	b.n	8003196 <UART_SetConfig+0x216>
 8003036:	2308      	movs	r3, #8
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e0ac      	b.n	8003196 <UART_SetConfig+0x216>
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e0a9      	b.n	8003196 <UART_SetConfig+0x216>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a96      	ldr	r2, [pc, #600]	@ (80032a0 <UART_SetConfig+0x320>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d124      	bne.n	8003096 <UART_SetConfig+0x116>
 800304c:	4b93      	ldr	r3, [pc, #588]	@ (800329c <UART_SetConfig+0x31c>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003054:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003058:	d011      	beq.n	800307e <UART_SetConfig+0xfe>
 800305a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800305e:	d817      	bhi.n	8003090 <UART_SetConfig+0x110>
 8003060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003064:	d011      	beq.n	800308a <UART_SetConfig+0x10a>
 8003066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800306a:	d811      	bhi.n	8003090 <UART_SetConfig+0x110>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <UART_SetConfig+0xf8>
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003074:	d006      	beq.n	8003084 <UART_SetConfig+0x104>
 8003076:	e00b      	b.n	8003090 <UART_SetConfig+0x110>
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e08b      	b.n	8003196 <UART_SetConfig+0x216>
 800307e:	2302      	movs	r3, #2
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e088      	b.n	8003196 <UART_SetConfig+0x216>
 8003084:	2304      	movs	r3, #4
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e085      	b.n	8003196 <UART_SetConfig+0x216>
 800308a:	2308      	movs	r3, #8
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e082      	b.n	8003196 <UART_SetConfig+0x216>
 8003090:	2310      	movs	r3, #16
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e07f      	b.n	8003196 <UART_SetConfig+0x216>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a82      	ldr	r2, [pc, #520]	@ (80032a4 <UART_SetConfig+0x324>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d124      	bne.n	80030ea <UART_SetConfig+0x16a>
 80030a0:	4b7e      	ldr	r3, [pc, #504]	@ (800329c <UART_SetConfig+0x31c>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80030a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030ac:	d011      	beq.n	80030d2 <UART_SetConfig+0x152>
 80030ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030b2:	d817      	bhi.n	80030e4 <UART_SetConfig+0x164>
 80030b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030b8:	d011      	beq.n	80030de <UART_SetConfig+0x15e>
 80030ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030be:	d811      	bhi.n	80030e4 <UART_SetConfig+0x164>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <UART_SetConfig+0x14c>
 80030c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c8:	d006      	beq.n	80030d8 <UART_SetConfig+0x158>
 80030ca:	e00b      	b.n	80030e4 <UART_SetConfig+0x164>
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e061      	b.n	8003196 <UART_SetConfig+0x216>
 80030d2:	2302      	movs	r3, #2
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e05e      	b.n	8003196 <UART_SetConfig+0x216>
 80030d8:	2304      	movs	r3, #4
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e05b      	b.n	8003196 <UART_SetConfig+0x216>
 80030de:	2308      	movs	r3, #8
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e058      	b.n	8003196 <UART_SetConfig+0x216>
 80030e4:	2310      	movs	r3, #16
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e055      	b.n	8003196 <UART_SetConfig+0x216>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6e      	ldr	r2, [pc, #440]	@ (80032a8 <UART_SetConfig+0x328>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d124      	bne.n	800313e <UART_SetConfig+0x1be>
 80030f4:	4b69      	ldr	r3, [pc, #420]	@ (800329c <UART_SetConfig+0x31c>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80030fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003100:	d011      	beq.n	8003126 <UART_SetConfig+0x1a6>
 8003102:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003106:	d817      	bhi.n	8003138 <UART_SetConfig+0x1b8>
 8003108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310c:	d011      	beq.n	8003132 <UART_SetConfig+0x1b2>
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003112:	d811      	bhi.n	8003138 <UART_SetConfig+0x1b8>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <UART_SetConfig+0x1a0>
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800311c:	d006      	beq.n	800312c <UART_SetConfig+0x1ac>
 800311e:	e00b      	b.n	8003138 <UART_SetConfig+0x1b8>
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e037      	b.n	8003196 <UART_SetConfig+0x216>
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e034      	b.n	8003196 <UART_SetConfig+0x216>
 800312c:	2304      	movs	r3, #4
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e031      	b.n	8003196 <UART_SetConfig+0x216>
 8003132:	2308      	movs	r3, #8
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e02e      	b.n	8003196 <UART_SetConfig+0x216>
 8003138:	2310      	movs	r3, #16
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e02b      	b.n	8003196 <UART_SetConfig+0x216>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5a      	ldr	r2, [pc, #360]	@ (80032ac <UART_SetConfig+0x32c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d124      	bne.n	8003192 <UART_SetConfig+0x212>
 8003148:	4b54      	ldr	r3, [pc, #336]	@ (800329c <UART_SetConfig+0x31c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003150:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003154:	d011      	beq.n	800317a <UART_SetConfig+0x1fa>
 8003156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0x20c>
 800315c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003160:	d011      	beq.n	8003186 <UART_SetConfig+0x206>
 8003162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003166:	d811      	bhi.n	800318c <UART_SetConfig+0x20c>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <UART_SetConfig+0x1f4>
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003170:	d006      	beq.n	8003180 <UART_SetConfig+0x200>
 8003172:	e00b      	b.n	800318c <UART_SetConfig+0x20c>
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x216>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e00a      	b.n	8003196 <UART_SetConfig+0x216>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e007      	b.n	8003196 <UART_SetConfig+0x216>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e004      	b.n	8003196 <UART_SetConfig+0x216>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e001      	b.n	8003196 <UART_SetConfig+0x216>
 8003192:	2310      	movs	r3, #16
 8003194:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319e:	d15b      	bne.n	8003258 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d827      	bhi.n	80031f6 <UART_SetConfig+0x276>
 80031a6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <UART_SetConfig+0x22c>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e7 	.word	0x080031e7
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d0:	f7ff f8f8 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80031d4:	61b8      	str	r0, [r7, #24]
        break;
 80031d6:	e013      	b.n	8003200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7ff f916 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80031dc:	61b8      	str	r0, [r7, #24]
        break;
 80031de:	e00f      	b.n	8003200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b33      	ldr	r3, [pc, #204]	@ (80032b0 <UART_SetConfig+0x330>)
 80031e2:	61bb      	str	r3, [r7, #24]
        break;
 80031e4:	e00c      	b.n	8003200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7ff f88d 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80031ea:	61b8      	str	r0, [r7, #24]
        break;
 80031ec:	e008      	b.n	8003200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f2:	61bb      	str	r3, [r7, #24]
        break;
 80031f4:	e004      	b.n	8003200 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77bb      	strb	r3, [r7, #30]
        break;
 80031fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8082 	beq.w	800330c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	005a      	lsls	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	441a      	add	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d916      	bls.n	8003252 <UART_SetConfig+0x2d2>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d212      	bcs.n	8003252 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b29a      	uxth	r2, r3
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	4313      	orrs	r3, r2
 8003246:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	89fa      	ldrh	r2, [r7, #14]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e05c      	b.n	800330c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	77bb      	strb	r3, [r7, #30]
 8003256:	e059      	b.n	800330c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003258:	7ffb      	ldrb	r3, [r7, #31]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d835      	bhi.n	80032ca <UART_SetConfig+0x34a>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <UART_SetConfig+0x2e4>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032cb 	.word	0x080032cb
 8003274:	080032bb 	.word	0x080032bb
 8003278:	080032cb 	.word	0x080032cb
 800327c:	080032cb 	.word	0x080032cb
 8003280:	080032cb 	.word	0x080032cb
 8003284:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff f89c 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800328c:	61b8      	str	r0, [r7, #24]
        break;
 800328e:	e021      	b.n	80032d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f8ba 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8003294:	61b8      	str	r0, [r7, #24]
        break;
 8003296:	e01d      	b.n	80032d4 <UART_SetConfig+0x354>
 8003298:	40013800 	.word	0x40013800
 800329c:	40021000 	.word	0x40021000
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40005000 	.word	0x40005000
 80032b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <UART_SetConfig+0x3a4>)
 80032b6:	61bb      	str	r3, [r7, #24]
        break;
 80032b8:	e00c      	b.n	80032d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff f823 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80032be:	61b8      	str	r0, [r7, #24]
        break;
 80032c0:	e008      	b.n	80032d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c6:	61bb      	str	r3, [r7, #24]
        break;
 80032c8:	e004      	b.n	80032d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	77bb      	strb	r3, [r7, #30]
        break;
 80032d2:	bf00      	nop
    }

    if (pclk != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d018      	beq.n	800330c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085a      	lsrs	r2, r3, #1
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	441a      	add	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d909      	bls.n	8003308 <UART_SetConfig+0x388>
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fa:	d205      	bcs.n	8003308 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	e001      	b.n	800330c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003318:	7fbb      	ldrb	r3, [r7, #30]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	007a1200 	.word	0x007a1200

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b098      	sub	sp, #96	@ 0x60
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fa9a 	bl	80009b4 <HAL_GetTick>
 8003480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d12e      	bne.n	80034ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f88c 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034be:	653b      	str	r3, [r7, #80]	@ 0x50
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e6      	bne.n	80034aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e062      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d149      	bne.n	8003590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f856 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03c      	beq.n	8003590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	623b      	str	r3, [r7, #32]
   return(result);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003534:	633b      	str	r3, [r7, #48]	@ 0x30
 8003536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800353a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e6      	bne.n	8003516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	617b      	str	r3, [r7, #20]
   return(result);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e5      	bne.n	8003548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e011      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3758      	adds	r7, #88	@ 0x58
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e04f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d04b      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fd f9ed 	bl	80009b4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e04e      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d037      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b80      	cmp	r3, #128	@ 0x80
 8003602:	d034      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d031      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d110      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f8ed 	bl	8003800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2208      	movs	r2, #8
 800362a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e029      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003648:	d111      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f8d3 	bl	8003800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e00f      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	429a      	cmp	r2, r3
 800368a:	d0a0      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b097      	sub	sp, #92	@ 0x5c
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ca:	d10e      	bne.n	80036ea <UART_Start_Receive_IT+0x52>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <UART_Start_Receive_IT+0x48>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036de:	e01a      	b.n	8003716 <UART_Start_Receive_IT+0x7e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	@ 0xff
 80036e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80036e8:	e015      	b.n	8003716 <UART_Start_Receive_IT+0x7e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <UART_Start_Receive_IT+0x76>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <UART_Start_Receive_IT+0x6c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	@ 0xff
 80036fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003702:	e008      	b.n	8003716 <UART_Start_Receive_IT+0x7e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	227f      	movs	r2, #127	@ 0x7f
 8003708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800370c:	e003      	b.n	8003716 <UART_Start_Receive_IT+0x7e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2222      	movs	r2, #34	@ 0x22
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	657b      	str	r3, [r7, #84]	@ 0x54
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003746:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800374c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003762:	d107      	bne.n	8003774 <UART_Start_Receive_IT+0xdc>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <UART_Start_Receive_IT+0x160>)
 8003770:	669a      	str	r2, [r3, #104]	@ 0x68
 8003772:	e002      	b.n	800377a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <UART_Start_Receive_IT+0x164>)
 8003778:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e6      	bne.n	8003782 <UART_Start_Receive_IT+0xea>
 80037b4:	e018      	b.n	80037e8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	613b      	str	r3, [r7, #16]
   return(result);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f043 0320 	orr.w	r3, r3, #32
 80037ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	69f9      	ldr	r1, [r7, #28]
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e6      	bne.n	80037b6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	375c      	adds	r7, #92	@ 0x5c
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	08003c67 	.word	0x08003c67
 80037fc:	08003abf 	.word	0x08003abf

08003800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b095      	sub	sp, #84	@ 0x54
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800381c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003826:	643b      	str	r3, [r7, #64]	@ 0x40
 8003828:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800382c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e6      	bne.n	8003808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	61fb      	str	r3, [r7, #28]
   return(result);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800385a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	2b01      	cmp	r3, #1
 8003874:	d118      	bne.n	80038a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	60bb      	str	r3, [r7, #8]
   return(result);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	647b      	str	r3, [r7, #68]	@ 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	613b      	str	r3, [r7, #16]
   return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e6      	bne.n	8003876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038bc:	bf00      	nop
 80038be:	3754      	adds	r7, #84	@ 0x54
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fb34 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b08f      	sub	sp, #60	@ 0x3c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003900:	2b21      	cmp	r3, #33	@ 0x21
 8003902:	d14c      	bne.n	800399e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d132      	bne.n	8003976 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	61fb      	str	r3, [r7, #28]
   return(result);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003930:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e6      	bne.n	8003910 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	613b      	str	r3, [r7, #16]
   return(result);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e6      	bne.n	8003942 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003974:	e013      	b.n	800399e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800399e:	bf00      	nop
 80039a0:	373c      	adds	r7, #60	@ 0x3c
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b091      	sub	sp, #68	@ 0x44
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b6:	2b21      	cmp	r3, #33	@ 0x21
 80039b8:	d151      	bne.n	8003a5e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d132      	bne.n	8003a2c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	623b      	str	r3, [r7, #32]
   return(result);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	617b      	str	r3, [r7, #20]
   return(result);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003a2a:	e018      	b.n	8003a5e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003a5e:	bf00      	nop
 8003a60:	3744      	adds	r7, #68	@ 0x44
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e6      	bne.n	8003a72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fc fdd9 	bl	8000668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b09c      	sub	sp, #112	@ 0x70
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003acc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ad6:	2b22      	cmp	r3, #34	@ 0x22
 8003ad8:	f040 80b9 	bne.w	8003c4e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ae2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ae6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003aea:	b2d9      	uxtb	r1, r3
 8003aec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	400a      	ands	r2, r1
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 809c 	bne.w	8003c5e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b78:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b7a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d018      	beq.n	8003be0 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	623b      	str	r3, [r7, #32]
   return(result);
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e6      	bne.n	8003bae <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d12e      	bne.n	8003c46 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d103      	bne.n	8003c36 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff f992 	bl	8002f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c44:	e00b      	b.n	8003c5e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fc fc84 	bl	8000554 <HAL_UART_RxCpltCallback>
}
 8003c4c:	e007      	b.n	8003c5e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0208 	orr.w	r2, r2, #8
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	3770      	adds	r7, #112	@ 0x70
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b09c      	sub	sp, #112	@ 0x70
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c74:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c7e:	2b22      	cmp	r3, #34	@ 0x22
 8003c80:	f040 80b9 	bne.w	8003df6 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c94:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c98:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ca2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 809c 	bne.w	8003e06 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d20:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e6      	bne.n	8003d56 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d12e      	bne.n	8003dee <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d103      	bne.n	8003dde <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2210      	movs	r2, #16
 8003ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff f8be 	bl	8002f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dec:	e00b      	b.n	8003e06 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fc fbb0 	bl	8000554 <HAL_UART_RxCpltCallback>
}
 8003df4:	e007      	b.n	8003e06 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0208 	orr.w	r2, r2, #8
 8003e04:	619a      	str	r2, [r3, #24]
}
 8003e06:	bf00      	nop
 8003e08:	3770      	adds	r7, #112	@ 0x70
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <memset>:
 8003e22:	4402      	add	r2, r0
 8003e24:	4603      	mov	r3, r0
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d100      	bne.n	8003e2c <memset+0xa>
 8003e2a:	4770      	bx	lr
 8003e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e30:	e7f9      	b.n	8003e26 <memset+0x4>

08003e32 <strncmp>:
 8003e32:	b510      	push	{r4, lr}
 8003e34:	b16a      	cbz	r2, 8003e52 <strncmp+0x20>
 8003e36:	3901      	subs	r1, #1
 8003e38:	1884      	adds	r4, r0, r2
 8003e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d103      	bne.n	8003e4e <strncmp+0x1c>
 8003e46:	42a0      	cmp	r0, r4
 8003e48:	d001      	beq.n	8003e4e <strncmp+0x1c>
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	d1f5      	bne.n	8003e3a <strncmp+0x8>
 8003e4e:	1ad0      	subs	r0, r2, r3
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	4610      	mov	r0, r2
 8003e54:	e7fc      	b.n	8003e50 <strncmp+0x1e>
	...

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e90 <__libc_init_array+0x38>)
 8003e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e94 <__libc_init_array+0x3c>)
 8003e5e:	1b64      	subs	r4, r4, r5
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	2600      	movs	r6, #0
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	4d0b      	ldr	r5, [pc, #44]	@ (8003e98 <__libc_init_array+0x40>)
 8003e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e9c <__libc_init_array+0x44>)
 8003e6c:	f000 f826 	bl	8003ebc <_init>
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	2600      	movs	r6, #0
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08003f24 	.word	0x08003f24
 8003e94:	08003f24 	.word	0x08003f24
 8003e98:	08003f24 	.word	0x08003f24
 8003e9c:	08003f28 	.word	0x08003f28

08003ea0 <memcpy>:
 8003ea0:	440a      	add	r2, r1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ea8:	d100      	bne.n	8003eac <memcpy+0xc>
 8003eaa:	4770      	bx	lr
 8003eac:	b510      	push	{r4, lr}
 8003eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb6:	4291      	cmp	r1, r2
 8003eb8:	d1f9      	bne.n	8003eae <memcpy+0xe>
 8003eba:	bd10      	pop	{r4, pc}

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
